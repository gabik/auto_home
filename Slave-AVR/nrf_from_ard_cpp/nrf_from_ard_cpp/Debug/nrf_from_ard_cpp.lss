
nrf_from_ard_cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  00001a9c  00001b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  00800186  00800186  00001bb6  2**0
                  ALLOC
  3 .stab         00001218  00000000  00000000  00001bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000003dc  00000000  00000000  00002dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000031ac  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000418  00000000  00000000  000031db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000677f  00000000  00000000  000035f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d9  00000000  00000000  00009d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000190e  00000000  00000000  0000ae4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d64  00000000  00000000  0000c75c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001726  00000000  00000000  0000d4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003a1f  00000000  00000000  0000ebe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000390  00000000  00000000  00012605  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__vector_7>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <__vector_11>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_16>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
      68:	4d 0c       	add	r4, r13

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf ef       	ldi	r28, 0xFF	; 255
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	ec e9       	ldi	r30, 0x9C	; 156
      7e:	fa e1       	ldi	r31, 0x1A	; 26
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a6 38       	cpi	r26, 0x86	; 134
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	21 e0       	ldi	r18, 0x01	; 1
      8e:	a6 e8       	ldi	r26, 0x86	; 134
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a4 3b       	cpi	r26, 0xB4	; 180
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	ca e6       	ldi	r28, 0x6A	; 106
      a0:	d0 e0       	ldi	r29, 0x00	; 0
      a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
      a4:	22 97       	sbiw	r28, 0x02	; 2
      a6:	fe 01       	movw	r30, r28
      a8:	0e 94 a6 0c 	call	0x194c	; 0x194c <__tablejump__>
      ac:	c8 36       	cpi	r28, 0x68	; 104
      ae:	d1 07       	cpc	r29, r17
      b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
      b2:	0e 94 48 0c 	call	0x1890	; 0x1890 <main>
      b6:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_Z12millis_setupv>:
      be:	10 92 86 01 	sts	0x0186, r1
      c2:	10 92 87 01 	sts	0x0187, r1
      c6:	10 92 88 01 	sts	0x0188, r1
      ca:	10 92 89 01 	sts	0x0189, r1
      ce:	10 92 8a 01 	sts	0x018A, r1
      d2:	10 92 8b 01 	sts	0x018B, r1
      d6:	10 92 8c 01 	sts	0x018C, r1
      da:	10 92 8d 01 	sts	0x018D, r1
      de:	16 bc       	out	0x26, r1	; 38
      e0:	85 b5       	in	r24, 0x25	; 37
      e2:	82 60       	ori	r24, 0x02	; 2
      e4:	85 bd       	out	0x25, r24	; 37
      e6:	ee e6       	ldi	r30, 0x6E	; 110
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	80 81       	ld	r24, Z
      ec:	81 60       	ori	r24, 0x01	; 1
      ee:	80 83       	st	Z, r24
      f0:	78 94       	sei
      f2:	08 95       	ret

000000f4 <_Z6millisv>:
      f4:	f8 94       	cli
      f6:	50 91 86 01 	lds	r21, 0x0186
      fa:	40 91 87 01 	lds	r20, 0x0187
      fe:	30 91 88 01 	lds	r19, 0x0188
     102:	90 91 89 01 	lds	r25, 0x0189
     106:	78 94       	sei
     108:	65 2f       	mov	r22, r21
     10a:	74 2f       	mov	r23, r20
     10c:	83 2f       	mov	r24, r19
     10e:	08 95       	ret

00000110 <__vector_16>:
     110:	1f 92       	push	r1
     112:	0f 92       	push	r0
     114:	0f b6       	in	r0, 0x3f	; 63
     116:	0f 92       	push	r0
     118:	11 24       	eor	r1, r1
     11a:	2f 93       	push	r18
     11c:	3f 93       	push	r19
     11e:	4f 93       	push	r20
     120:	5f 93       	push	r21
     122:	6f 93       	push	r22
     124:	7f 93       	push	r23
     126:	8f 93       	push	r24
     128:	9f 93       	push	r25
     12a:	af 93       	push	r26
     12c:	20 91 86 01 	lds	r18, 0x0186
     130:	30 91 87 01 	lds	r19, 0x0187
     134:	40 91 88 01 	lds	r20, 0x0188
     138:	50 91 89 01 	lds	r21, 0x0189
     13c:	60 91 8a 01 	lds	r22, 0x018A
     140:	70 91 8b 01 	lds	r23, 0x018B
     144:	80 91 8c 01 	lds	r24, 0x018C
     148:	90 91 8d 01 	lds	r25, 0x018D
     14c:	a2 e0       	ldi	r26, 0x02	; 2
     14e:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__adddi3_s8>
     152:	20 93 86 01 	sts	0x0186, r18
     156:	30 93 87 01 	sts	0x0187, r19
     15a:	40 93 88 01 	sts	0x0188, r20
     15e:	50 93 89 01 	sts	0x0189, r21
     162:	60 93 8a 01 	sts	0x018A, r22
     166:	70 93 8b 01 	sts	0x018B, r23
     16a:	80 93 8c 01 	sts	0x018C, r24
     16e:	90 93 8d 01 	sts	0x018D, r25
     172:	af 91       	pop	r26
     174:	9f 91       	pop	r25
     176:	8f 91       	pop	r24
     178:	7f 91       	pop	r23
     17a:	6f 91       	pop	r22
     17c:	5f 91       	pop	r21
     17e:	4f 91       	pop	r20
     180:	3f 91       	pop	r19
     182:	2f 91       	pop	r18
     184:	0f 90       	pop	r0
     186:	0f be       	out	0x3f, r0	; 63
     188:	0f 90       	pop	r0
     18a:	1f 90       	pop	r1
     18c:	18 95       	reti

0000018e <_ZN4RF243csnEi>:
     18e:	61 30       	cpi	r22, 0x01	; 1
     190:	71 05       	cpc	r23, r1
     192:	11 f4       	brne	.+4      	; 0x198 <_ZN4RF243csnEi+0xa>
     194:	29 9a       	sbi	0x05, 1	; 5
     196:	08 95       	ret
     198:	29 98       	cbi	0x05, 1	; 5
     19a:	08 95       	ret

0000019c <_ZN4RF242ceEi>:
     19c:	61 30       	cpi	r22, 0x01	; 1
     19e:	71 05       	cpc	r23, r1
     1a0:	11 f4       	brne	.+4      	; 0x1a6 <_ZN4RF242ceEi+0xa>
     1a2:	28 9a       	sbi	0x05, 0	; 5
     1a4:	08 95       	ret
     1a6:	28 98       	cbi	0x05, 0	; 5
     1a8:	08 95       	ret

000001aa <_ZN4RF2413read_registerEhPhh>:
     1aa:	ef 92       	push	r14
     1ac:	ff 92       	push	r15
     1ae:	0f 93       	push	r16
     1b0:	1f 93       	push	r17
     1b2:	cf 93       	push	r28
     1b4:	df 93       	push	r29
     1b6:	8c 01       	movw	r16, r24
     1b8:	e6 2e       	mov	r14, r22
     1ba:	ea 01       	movw	r28, r20
     1bc:	f2 2e       	mov	r15, r18
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>
     1c6:	8e 2d       	mov	r24, r14
     1c8:	8f 71       	andi	r24, 0x1F	; 31
     1ca:	8e bd       	out	0x2e, r24	; 46
     1cc:	0d b4       	in	r0, 0x2d	; 45
     1ce:	07 fe       	sbrs	r0, 7
     1d0:	fd cf       	rjmp	.-6      	; 0x1cc <_ZN4RF2413read_registerEhPhh+0x22>
     1d2:	ee b4       	in	r14, 0x2e	; 46
     1d4:	9f 2d       	mov	r25, r15
     1d6:	91 50       	subi	r25, 0x01	; 1
     1d8:	ff 20       	and	r15, r15
     1da:	49 f0       	breq	.+18     	; 0x1ee <_ZN4RF2413read_registerEhPhh+0x44>
     1dc:	3f ef       	ldi	r19, 0xFF	; 255
     1de:	3e bd       	out	0x2e, r19	; 46
     1e0:	0d b4       	in	r0, 0x2d	; 45
     1e2:	07 fe       	sbrs	r0, 7
     1e4:	fd cf       	rjmp	.-6      	; 0x1e0 <_ZN4RF2413read_registerEhPhh+0x36>
     1e6:	2e b5       	in	r18, 0x2e	; 46
     1e8:	29 93       	st	Y+, r18
     1ea:	91 50       	subi	r25, 0x01	; 1
     1ec:	c0 f7       	brcc	.-16     	; 0x1de <_ZN4RF2413read_registerEhPhh+0x34>
     1ee:	61 e0       	ldi	r22, 0x01	; 1
     1f0:	70 e0       	ldi	r23, 0x00	; 0
     1f2:	c8 01       	movw	r24, r16
     1f4:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>
     1f8:	8e 2d       	mov	r24, r14
     1fa:	df 91       	pop	r29
     1fc:	cf 91       	pop	r28
     1fe:	1f 91       	pop	r17
     200:	0f 91       	pop	r16
     202:	ff 90       	pop	r15
     204:	ef 90       	pop	r14
     206:	08 95       	ret

00000208 <_ZN4RF2413read_registerEh>:
     208:	1f 93       	push	r17
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	ec 01       	movw	r28, r24
     210:	16 2f       	mov	r17, r22
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>
     21a:	1f 71       	andi	r17, 0x1F	; 31
     21c:	1e bd       	out	0x2e, r17	; 46
     21e:	0d b4       	in	r0, 0x2d	; 45
     220:	07 fe       	sbrs	r0, 7
     222:	fd cf       	rjmp	.-6      	; 0x21e <_ZN4RF2413read_registerEh+0x16>
     224:	8e b5       	in	r24, 0x2e	; 46
     226:	8f ef       	ldi	r24, 0xFF	; 255
     228:	8e bd       	out	0x2e, r24	; 46
     22a:	0d b4       	in	r0, 0x2d	; 45
     22c:	07 fe       	sbrs	r0, 7
     22e:	fd cf       	rjmp	.-6      	; 0x22a <_ZN4RF2413read_registerEh+0x22>
     230:	1e b5       	in	r17, 0x2e	; 46
     232:	61 e0       	ldi	r22, 0x01	; 1
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	ce 01       	movw	r24, r28
     238:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>
     23c:	81 2f       	mov	r24, r17
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	1f 91       	pop	r17
     244:	08 95       	ret

00000246 <_ZN4RF2414write_registerEhPKhh>:
     246:	ef 92       	push	r14
     248:	ff 92       	push	r15
     24a:	0f 93       	push	r16
     24c:	1f 93       	push	r17
     24e:	cf 93       	push	r28
     250:	df 93       	push	r29
     252:	8c 01       	movw	r16, r24
     254:	e6 2e       	mov	r14, r22
     256:	ea 01       	movw	r28, r20
     258:	f2 2e       	mov	r15, r18
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	70 e0       	ldi	r23, 0x00	; 0
     25e:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>
     262:	8e 2d       	mov	r24, r14
     264:	8f 71       	andi	r24, 0x1F	; 31
     266:	80 62       	ori	r24, 0x20	; 32
     268:	8e bd       	out	0x2e, r24	; 46
     26a:	0d b4       	in	r0, 0x2d	; 45
     26c:	07 fe       	sbrs	r0, 7
     26e:	fd cf       	rjmp	.-6      	; 0x26a <_ZN4RF2414write_registerEhPKhh+0x24>
     270:	ee b4       	in	r14, 0x2e	; 46
     272:	9f 2d       	mov	r25, r15
     274:	91 50       	subi	r25, 0x01	; 1
     276:	ff 20       	and	r15, r15
     278:	41 f0       	breq	.+16     	; 0x28a <_ZN4RF2414write_registerEhPKhh+0x44>
     27a:	29 91       	ld	r18, Y+
     27c:	2e bd       	out	0x2e, r18	; 46
     27e:	0d b4       	in	r0, 0x2d	; 45
     280:	07 fe       	sbrs	r0, 7
     282:	fd cf       	rjmp	.-6      	; 0x27e <_ZN4RF2414write_registerEhPKhh+0x38>
     284:	2e b5       	in	r18, 0x2e	; 46
     286:	91 50       	subi	r25, 0x01	; 1
     288:	c0 f7       	brcc	.-16     	; 0x27a <_ZN4RF2414write_registerEhPKhh+0x34>
     28a:	61 e0       	ldi	r22, 0x01	; 1
     28c:	70 e0       	ldi	r23, 0x00	; 0
     28e:	c8 01       	movw	r24, r16
     290:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>
     294:	8e 2d       	mov	r24, r14
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	1f 91       	pop	r17
     29c:	0f 91       	pop	r16
     29e:	ff 90       	pop	r15
     2a0:	ef 90       	pop	r14
     2a2:	08 95       	ret

000002a4 <_ZN4RF2414write_registerEhh>:
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	ec 01       	movw	r28, r24
     2ae:	16 2f       	mov	r17, r22
     2b0:	04 2f       	mov	r16, r20
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	70 e0       	ldi	r23, 0x00	; 0
     2b6:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>
     2ba:	1f 71       	andi	r17, 0x1F	; 31
     2bc:	10 62       	ori	r17, 0x20	; 32
     2be:	1e bd       	out	0x2e, r17	; 46
     2c0:	0d b4       	in	r0, 0x2d	; 45
     2c2:	07 fe       	sbrs	r0, 7
     2c4:	fd cf       	rjmp	.-6      	; 0x2c0 <_ZN4RF2414write_registerEhh+0x1c>
     2c6:	1e b5       	in	r17, 0x2e	; 46
     2c8:	0e bd       	out	0x2e, r16	; 46
     2ca:	0d b4       	in	r0, 0x2d	; 45
     2cc:	07 fe       	sbrs	r0, 7
     2ce:	fd cf       	rjmp	.-6      	; 0x2ca <_ZN4RF2414write_registerEhh+0x26>
     2d0:	8e b5       	in	r24, 0x2e	; 46
     2d2:	61 e0       	ldi	r22, 0x01	; 1
     2d4:	70 e0       	ldi	r23, 0x00	; 0
     2d6:	ce 01       	movw	r24, r28
     2d8:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>
     2dc:	81 2f       	mov	r24, r17
     2de:	df 91       	pop	r29
     2e0:	cf 91       	pop	r28
     2e2:	1f 91       	pop	r17
     2e4:	0f 91       	pop	r16
     2e6:	08 95       	ret

000002e8 <_ZN4RF2413write_payloadEPKvh>:
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	ec 01       	movw	r28, r24
     2f8:	d6 2e       	mov	r13, r22
     2fa:	e7 2e       	mov	r14, r23
     2fc:	0c 81       	ldd	r16, Y+4	; 0x04
     2fe:	14 2f       	mov	r17, r20
     300:	04 17       	cp	r16, r20
     302:	08 f4       	brcc	.+2      	; 0x306 <_ZN4RF2413write_payloadEPKvh+0x1e>
     304:	10 2f       	mov	r17, r16
     306:	8e 81       	ldd	r24, Y+6	; 0x06
     308:	81 11       	cpse	r24, r1
     30a:	02 c0       	rjmp	.+4      	; 0x310 <_ZN4RF2413write_payloadEPKvh+0x28>
     30c:	01 1b       	sub	r16, r17
     30e:	01 c0       	rjmp	.+2      	; 0x312 <_ZN4RF2413write_payloadEPKvh+0x2a>
     310:	00 e0       	ldi	r16, 0x00	; 0
     312:	60 e0       	ldi	r22, 0x00	; 0
     314:	70 e0       	ldi	r23, 0x00	; 0
     316:	ce 01       	movw	r24, r28
     318:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>
     31c:	80 ea       	ldi	r24, 0xA0	; 160
     31e:	8e bd       	out	0x2e, r24	; 46
     320:	0d b4       	in	r0, 0x2d	; 45
     322:	07 fe       	sbrs	r0, 7
     324:	fd cf       	rjmp	.-6      	; 0x320 <_ZN4RF2413write_payloadEPKvh+0x38>
     326:	fe b4       	in	r15, 0x2e	; 46
     328:	91 2f       	mov	r25, r17
     32a:	91 50       	subi	r25, 0x01	; 1
     32c:	11 23       	and	r17, r17
     32e:	51 f0       	breq	.+20     	; 0x344 <_ZN4RF2413write_payloadEPKvh+0x5c>
     330:	ed 2d       	mov	r30, r13
     332:	fe 2d       	mov	r31, r14
     334:	21 91       	ld	r18, Z+
     336:	2e bd       	out	0x2e, r18	; 46
     338:	0d b4       	in	r0, 0x2d	; 45
     33a:	07 fe       	sbrs	r0, 7
     33c:	fd cf       	rjmp	.-6      	; 0x338 <_ZN4RF2413write_payloadEPKvh+0x50>
     33e:	2e b5       	in	r18, 0x2e	; 46
     340:	91 50       	subi	r25, 0x01	; 1
     342:	c0 f7       	brcc	.-16     	; 0x334 <_ZN4RF2413write_payloadEPKvh+0x4c>
     344:	90 2f       	mov	r25, r16
     346:	91 50       	subi	r25, 0x01	; 1
     348:	00 23       	and	r16, r16
     34a:	39 f0       	breq	.+14     	; 0x35a <_ZN4RF2413write_payloadEPKvh+0x72>
     34c:	1e bc       	out	0x2e, r1	; 46
     34e:	0d b4       	in	r0, 0x2d	; 45
     350:	07 fe       	sbrs	r0, 7
     352:	fd cf       	rjmp	.-6      	; 0x34e <_ZN4RF2413write_payloadEPKvh+0x66>
     354:	2e b5       	in	r18, 0x2e	; 46
     356:	91 50       	subi	r25, 0x01	; 1
     358:	c8 f7       	brcc	.-14     	; 0x34c <_ZN4RF2413write_payloadEPKvh+0x64>
     35a:	61 e0       	ldi	r22, 0x01	; 1
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	ce 01       	movw	r24, r28
     360:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>
     364:	8f 2d       	mov	r24, r15
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	ef 90       	pop	r14
     372:	df 90       	pop	r13
     374:	08 95       	ret

00000376 <_ZN4RF2412read_payloadEPvh>:
     376:	df 92       	push	r13
     378:	ef 92       	push	r14
     37a:	ff 92       	push	r15
     37c:	0f 93       	push	r16
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	ec 01       	movw	r28, r24
     386:	d6 2e       	mov	r13, r22
     388:	e7 2e       	mov	r14, r23
     38a:	0c 81       	ldd	r16, Y+4	; 0x04
     38c:	14 2f       	mov	r17, r20
     38e:	04 17       	cp	r16, r20
     390:	08 f4       	brcc	.+2      	; 0x394 <_ZN4RF2412read_payloadEPvh+0x1e>
     392:	10 2f       	mov	r17, r16
     394:	8e 81       	ldd	r24, Y+6	; 0x06
     396:	81 11       	cpse	r24, r1
     398:	02 c0       	rjmp	.+4      	; 0x39e <_ZN4RF2412read_payloadEPvh+0x28>
     39a:	01 1b       	sub	r16, r17
     39c:	01 c0       	rjmp	.+2      	; 0x3a0 <_ZN4RF2412read_payloadEPvh+0x2a>
     39e:	00 e0       	ldi	r16, 0x00	; 0
     3a0:	60 e0       	ldi	r22, 0x00	; 0
     3a2:	70 e0       	ldi	r23, 0x00	; 0
     3a4:	ce 01       	movw	r24, r28
     3a6:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>
     3aa:	81 e6       	ldi	r24, 0x61	; 97
     3ac:	8e bd       	out	0x2e, r24	; 46
     3ae:	0d b4       	in	r0, 0x2d	; 45
     3b0:	07 fe       	sbrs	r0, 7
     3b2:	fd cf       	rjmp	.-6      	; 0x3ae <_ZN4RF2412read_payloadEPvh+0x38>
     3b4:	fe b4       	in	r15, 0x2e	; 46
     3b6:	91 2f       	mov	r25, r17
  
  //printf("[Reading %u bytes %u blanks]",data_len,blank_len);
  
  csn(LOW);
  status = SPI.transfer( R_RX_PAYLOAD );
  while ( data_len-- )
     3b8:	91 50       	subi	r25, 0x01	; 1
     3ba:	11 23       	and	r17, r17
     3bc:	59 f0       	breq	.+22     	; 0x3d4 <_ZN4RF2412read_payloadEPvh+0x5e>
/****************************************************************************/

uint8_t RF24::read_payload(void* buf, uint8_t len)
{
  uint8_t status;
  uint8_t* current = reinterpret_cast<uint8_t*>(buf);
     3be:	ed 2d       	mov	r30, r13
     3c0:	fe 2d       	mov	r31, r14
};

extern SPIClass SPI;

uint8_t SPIClass::transfer(uint8_t _data) {
	  SPDR = _data;
     3c2:	3f ef       	ldi	r19, 0xFF	; 255
     3c4:	3e bd       	out	0x2e, r19	; 46
	  while (!(SPSR & _BV(SPIF)))
     3c6:	0d b4       	in	r0, 0x2d	; 45
     3c8:	07 fe       	sbrs	r0, 7
     3ca:	fd cf       	rjmp	.-6      	; 0x3c6 <_ZN4RF2412read_payloadEPvh+0x50>
	  ;
	  return SPDR;
     3cc:	2e b5       	in	r18, 0x2e	; 46
  //printf("[Reading %u bytes %u blanks]",data_len,blank_len);
  
  csn(LOW);
  status = SPI.transfer( R_RX_PAYLOAD );
  while ( data_len-- )
    *current++ = SPI.transfer(0xff);
     3ce:	21 93       	st	Z+, r18
  
  //printf("[Reading %u bytes %u blanks]",data_len,blank_len);
  
  csn(LOW);
  status = SPI.transfer( R_RX_PAYLOAD );
  while ( data_len-- )
     3d0:	91 50       	subi	r25, 0x01	; 1
     3d2:	c0 f7       	brcc	.-16     	; 0x3c4 <_ZN4RF2412read_payloadEPvh+0x4e>
    *current++ = SPI.transfer(0xff);
  while ( blank_len-- )
     3d4:	90 2f       	mov	r25, r16
     3d6:	91 50       	subi	r25, 0x01	; 1
     3d8:	00 23       	and	r16, r16
     3da:	41 f0       	breq	.+16     	; 0x3ec <_ZN4RF2412read_payloadEPvh+0x76>
};

extern SPIClass SPI;

uint8_t SPIClass::transfer(uint8_t _data) {
	  SPDR = _data;
     3dc:	2f ef       	ldi	r18, 0xFF	; 255
     3de:	2e bd       	out	0x2e, r18	; 46
	  while (!(SPSR & _BV(SPIF)))
     3e0:	0d b4       	in	r0, 0x2d	; 45
     3e2:	07 fe       	sbrs	r0, 7
     3e4:	fd cf       	rjmp	.-6      	; 0x3e0 <_ZN4RF2412read_payloadEPvh+0x6a>
	  ;
	  return SPDR;
     3e6:	3e b5       	in	r19, 0x2e	; 46
     3e8:	91 50       	subi	r25, 0x01	; 1
     3ea:	c8 f7       	brcc	.-14     	; 0x3de <_ZN4RF2412read_payloadEPvh+0x68>
    SPI.transfer(0xff);
  csn(HIGH);
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	ce 01       	movw	r24, r28
     3f2:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>

  return status;
}
     3f6:	8f 2d       	mov	r24, r15
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	ff 90       	pop	r15
     402:	ef 90       	pop	r14
     404:	df 90       	pop	r13
     406:	08 95       	ret

00000408 <_ZN4RF248flush_rxEv>:

/****************************************************************************/

uint8_t RF24::flush_rx(void)
{
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	ec 01       	movw	r28, r24
  uint8_t status;

  csn(LOW);
     410:	60 e0       	ldi	r22, 0x00	; 0
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>
};

extern SPIClass SPI;

uint8_t SPIClass::transfer(uint8_t _data) {
	  SPDR = _data;
     418:	82 ee       	ldi	r24, 0xE2	; 226
     41a:	8e bd       	out	0x2e, r24	; 46
	  while (!(SPSR & _BV(SPIF)))
     41c:	0d b4       	in	r0, 0x2d	; 45
     41e:	07 fe       	sbrs	r0, 7
     420:	fd cf       	rjmp	.-6      	; 0x41c <_ZN4RF248flush_rxEv+0x14>
	  ;
	  return SPDR;
     422:	1e b5       	in	r17, 0x2e	; 46
  status = SPI.transfer( FLUSH_RX );
  csn(HIGH);
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	70 e0       	ldi	r23, 0x00	; 0
     428:	ce 01       	movw	r24, r28
     42a:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>

  return status;
}
     42e:	81 2f       	mov	r24, r17
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	08 95       	ret

00000438 <_ZN4RF248flush_txEv>:

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	ec 01       	movw	r28, r24
  uint8_t status;

  csn(LOW);
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>
};

extern SPIClass SPI;

uint8_t SPIClass::transfer(uint8_t _data) {
	  SPDR = _data;
     448:	81 ee       	ldi	r24, 0xE1	; 225
     44a:	8e bd       	out	0x2e, r24	; 46
	  while (!(SPSR & _BV(SPIF)))
     44c:	0d b4       	in	r0, 0x2d	; 45
     44e:	07 fe       	sbrs	r0, 7
     450:	fd cf       	rjmp	.-6      	; 0x44c <_ZN4RF248flush_txEv+0x14>
	  ;
	  return SPDR;
     452:	1e b5       	in	r17, 0x2e	; 46
  status = SPI.transfer( FLUSH_TX );
  csn(HIGH);
     454:	61 e0       	ldi	r22, 0x01	; 1
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	ce 01       	movw	r24, r28
     45a:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>

  return status;
}
     45e:	81 2f       	mov	r24, r17
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	1f 91       	pop	r17
     466:	08 95       	ret

00000468 <_ZN4RF2410get_statusEv>:
{
	return get_status();
}

uint8_t RF24::get_status(void)
{
     468:	1f 93       	push	r17
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
     46e:	ec 01       	movw	r28, r24
  uint8_t status;

  csn(LOW);
     470:	60 e0       	ldi	r22, 0x00	; 0
     472:	70 e0       	ldi	r23, 0x00	; 0
     474:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>
};

extern SPIClass SPI;

uint8_t SPIClass::transfer(uint8_t _data) {
	  SPDR = _data;
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	8e bd       	out	0x2e, r24	; 46
	  while (!(SPSR & _BV(SPIF)))
     47c:	0d b4       	in	r0, 0x2d	; 45
     47e:	07 fe       	sbrs	r0, 7
     480:	fd cf       	rjmp	.-6      	; 0x47c <_ZN4RF2410get_statusEv+0x14>
	  ;
	  return SPDR;
     482:	1e b5       	in	r17, 0x2e	; 46
  status = SPI.transfer( NOP );
  csn(HIGH);
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	ce 01       	movw	r24, r28
     48a:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>

  return status;
}
     48e:	81 2f       	mov	r24, r17
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	1f 91       	pop	r17
     496:	08 95       	ret

00000498 <_ZN4RF2415gabi_get_statusEv>:

/****************************************************************************/

uint8_t RF24::gabi_get_status(void)
{
	return get_status();
     498:	0e 94 34 02 	call	0x468	; 0x468 <_ZN4RF2410get_statusEv>
}
     49c:	08 95       	ret

0000049e <_ZN4RF24C1Ehh>:
/****************************************************************************/
/*

*/

RF24::RF24(uint8_t _cepin, uint8_t _cspin):
     49e:	fc 01       	movw	r30, r24
ce_pin(_cepin), csn_pin(_cspin), wide_band(true), p_variant(false),
payload_size(32), ack_payload_available(false), dynamic_payloads_enabled(false),
pipe0_reading_address(0)
     4a0:	60 83       	st	Z, r22
     4a2:	41 83       	std	Z+1, r20	; 0x01
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	82 83       	std	Z+2, r24	; 0x02
     4a8:	13 82       	std	Z+3, r1	; 0x03
     4aa:	80 e2       	ldi	r24, 0x20	; 32
     4ac:	84 83       	std	Z+4, r24	; 0x04
     4ae:	15 82       	std	Z+5, r1	; 0x05
     4b0:	16 82       	std	Z+6, r1	; 0x06
     4b2:	10 86       	std	Z+8, r1	; 0x08
     4b4:	11 86       	std	Z+9, r1	; 0x09
     4b6:	12 86       	std	Z+10, r1	; 0x0a
     4b8:	13 86       	std	Z+11, r1	; 0x0b
     4ba:	14 86       	std	Z+12, r1	; 0x0c
     4bc:	15 86       	std	Z+13, r1	; 0x0d
     4be:	16 86       	std	Z+14, r1	; 0x0e
     4c0:	17 86       	std	Z+15, r1	; 0x0f
     4c2:	08 95       	ret

000004c4 <_ZN4RF2410setChannelEh>:
}

/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
     4c4:	46 2f       	mov	r20, r22
  // TODO: This method could take advantage of the 'wide_band' calculation
  // done in setChannel() to require certain channel spacing.

  const uint8_t max_channel = 127;
  write_register(RF_CH,min(channel,max_channel));
     4c6:	60 38       	cpi	r22, 0x80	; 128
     4c8:	08 f0       	brcs	.+2      	; 0x4cc <_ZN4RF2410setChannelEh+0x8>
     4ca:	4f e7       	ldi	r20, 0x7F	; 127
     4cc:	65 e0       	ldi	r22, 0x05	; 5
     4ce:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN4RF2414write_registerEhh>
     4d2:	08 95       	ret

000004d4 <_ZN4RF2414setPayloadSizeEh>:
/****************************************************************************/

void RF24::setPayloadSize(uint8_t size)
{
  const uint8_t max_payload_size = 32;
  payload_size = min(size,max_payload_size);
     4d4:	61 32       	cpi	r22, 0x21	; 33
     4d6:	08 f0       	brcs	.+2      	; 0x4da <_ZN4RF2414setPayloadSizeEh+0x6>
     4d8:	60 e2       	ldi	r22, 0x20	; 32
     4da:	fc 01       	movw	r30, r24
     4dc:	64 83       	std	Z+4, r22	; 0x04
     4de:	08 95       	ret

000004e0 <_ZN4RF2414startListeningEv>:
}

/****************************************************************************/

void RF24::startListening(void)
{
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	ec 01       	movw	r28, r24
  write_register(CONFIG, read_register(CONFIG) | _BV(PWR_UP) | _BV(PRIM_RX));
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	0e 94 04 01 	call	0x208	; 0x208 <_ZN4RF2413read_registerEh>
     4ec:	48 2f       	mov	r20, r24
     4ee:	43 60       	ori	r20, 0x03	; 3
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	ce 01       	movw	r24, r28
     4f4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN4RF2414write_registerEhh>
  write_register(STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     4f8:	40 e7       	ldi	r20, 0x70	; 112
     4fa:	67 e0       	ldi	r22, 0x07	; 7
     4fc:	ce 01       	movw	r24, r28
     4fe:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN4RF2414write_registerEhh>

  // Restore the pipe0 adddress, if exists
  if (pipe0_reading_address)
     502:	28 85       	ldd	r18, Y+8	; 0x08
     504:	39 85       	ldd	r19, Y+9	; 0x09
     506:	4a 85       	ldd	r20, Y+10	; 0x0a
     508:	5b 85       	ldd	r21, Y+11	; 0x0b
     50a:	6c 85       	ldd	r22, Y+12	; 0x0c
     50c:	7d 85       	ldd	r23, Y+13	; 0x0d
     50e:	8e 85       	ldd	r24, Y+14	; 0x0e
     510:	9f 85       	ldd	r25, Y+15	; 0x0f
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	0e 94 98 0c 	call	0x1930	; 0x1930 <__cmpdi2_s8>
     518:	41 f0       	breq	.+16     	; 0x52a <_ZN4RF2414startListeningEv+0x4a>
    write_register(RX_ADDR_P0, reinterpret_cast<const uint8_t*>(&pipe0_reading_address), 5);
     51a:	ae 01       	movw	r20, r28
     51c:	48 5f       	subi	r20, 0xF8	; 248
     51e:	5f 4f       	sbci	r21, 0xFF	; 255
     520:	25 e0       	ldi	r18, 0x05	; 5
     522:	6a e0       	ldi	r22, 0x0A	; 10
     524:	ce 01       	movw	r24, r28
     526:	0e 94 23 01 	call	0x246	; 0x246 <_ZN4RF2414write_registerEhPKhh>

  // Flush buffers
  flush_rx();
     52a:	ce 01       	movw	r24, r28
     52c:	0e 94 04 02 	call	0x408	; 0x408 <_ZN4RF248flush_rxEv>
  flush_tx();
     530:	ce 01       	movw	r24, r28
     532:	0e 94 1c 02 	call	0x438	; 0x438 <_ZN4RF248flush_txEv>

  // Go!
  ce(HIGH);
     536:	61 e0       	ldi	r22, 0x01	; 1
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	ce 01       	movw	r24, r28
     53c:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN4RF242ceEi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     540:	8b e2       	ldi	r24, 0x2B	; 43
     542:	8a 95       	dec	r24
     544:	f1 f7       	brne	.-4      	; 0x542 <_ZN4RF2414startListeningEv+0x62>
     546:	00 00       	nop

  // wait for the radio to come up (130us actually only needed)
  _delay_us(130);
}
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	08 95       	ret

0000054e <_ZN4RF2413stopListeningEv>:

/****************************************************************************/

void RF24::stopListening(void)
{
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	ec 01       	movw	r28, r24
  ce(LOW);
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN4RF242ceEi>
  flush_tx();
     55c:	ce 01       	movw	r24, r28
     55e:	0e 94 1c 02 	call	0x438	; 0x438 <_ZN4RF248flush_txEv>
  flush_rx();
     562:	ce 01       	movw	r24, r28
     564:	0e 94 04 02 	call	0x408	; 0x408 <_ZN4RF248flush_rxEv>
}
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	08 95       	ret

0000056e <_ZN4RF249powerDownEv>:

/****************************************************************************/

void RF24::powerDown(void)
{
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	ec 01       	movw	r28, r24
  write_register(CONFIG,read_register(CONFIG) & ~_BV(PWR_UP));
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	0e 94 04 01 	call	0x208	; 0x208 <_ZN4RF2413read_registerEh>
     57a:	48 2f       	mov	r20, r24
     57c:	4d 7f       	andi	r20, 0xFD	; 253
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	ce 01       	movw	r24, r28
     582:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN4RF2414write_registerEhh>
}
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	08 95       	ret

0000058c <_ZN4RF2410startWriteEPKvh>:
  return result;
}
/****************************************************************************/

void RF24::startWrite( const void* buf, uint8_t len )
{
     58c:	ff 92       	push	r15
     58e:	0f 93       	push	r16
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	ec 01       	movw	r28, r24
     598:	8b 01       	movw	r16, r22
     59a:	f4 2e       	mov	r15, r20
  // Transmitter power-up
  write_register(CONFIG, ( read_register(CONFIG) | _BV(PWR_UP) ) & ~_BV(PRIM_RX) );
     59c:	60 e0       	ldi	r22, 0x00	; 0
     59e:	0e 94 04 01 	call	0x208	; 0x208 <_ZN4RF2413read_registerEh>
     5a2:	8c 7f       	andi	r24, 0xFC	; 252
     5a4:	48 2f       	mov	r20, r24
     5a6:	42 60       	ori	r20, 0x02	; 2
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	ce 01       	movw	r24, r28
     5ac:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN4RF2414write_registerEhh>
     5b0:	82 e3       	ldi	r24, 0x32	; 50
     5b2:	8a 95       	dec	r24
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <_ZN4RF2410startWriteEPKvh+0x26>
  _delay_us(150);

  // Send the payload
  write_payload( buf, len );
     5b6:	4f 2d       	mov	r20, r15
     5b8:	b8 01       	movw	r22, r16
     5ba:	ce 01       	movw	r24, r28
     5bc:	0e 94 74 01 	call	0x2e8	; 0x2e8 <_ZN4RF2413write_payloadEPKvh>

  // Allons!
  ce(HIGH);
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	ce 01       	movw	r24, r28
     5c6:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN4RF242ceEi>
     5ca:	85 e0       	ldi	r24, 0x05	; 5
     5cc:	8a 95       	dec	r24
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <_ZN4RF2410startWriteEPKvh+0x40>
  _delay_us(15);
  ce(LOW);
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	ce 01       	movw	r24, r28
     5d6:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN4RF242ceEi>
}
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	ff 90       	pop	r15
     5e4:	08 95       	ret

000005e6 <_ZN4RF2421getDynamicPayloadSizeEv>:

/****************************************************************************/

uint8_t RF24::getDynamicPayloadSize(void)
{
     5e6:	1f 93       	push	r17
     5e8:	cf 93       	push	r28
     5ea:	df 93       	push	r29
     5ec:	ec 01       	movw	r28, r24
  uint8_t result = 0;

  csn(LOW);
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>
};

extern SPIClass SPI;

uint8_t SPIClass::transfer(uint8_t _data) {
	  SPDR = _data;
     5f6:	80 e6       	ldi	r24, 0x60	; 96
     5f8:	8e bd       	out	0x2e, r24	; 46
	  while (!(SPSR & _BV(SPIF)))
     5fa:	0d b4       	in	r0, 0x2d	; 45
     5fc:	07 fe       	sbrs	r0, 7
     5fe:	fd cf       	rjmp	.-6      	; 0x5fa <_ZN4RF2421getDynamicPayloadSizeEv+0x14>
	  ;
	  return SPDR;
     600:	8e b5       	in	r24, 0x2e	; 46
};

extern SPIClass SPI;

uint8_t SPIClass::transfer(uint8_t _data) {
	  SPDR = _data;
     602:	8f ef       	ldi	r24, 0xFF	; 255
     604:	8e bd       	out	0x2e, r24	; 46
	  while (!(SPSR & _BV(SPIF)))
     606:	0d b4       	in	r0, 0x2d	; 45
     608:	07 fe       	sbrs	r0, 7
     60a:	fd cf       	rjmp	.-6      	; 0x606 <_ZN4RF2421getDynamicPayloadSizeEv+0x20>
	  ;
	  return SPDR;
     60c:	1e b5       	in	r17, 0x2e	; 46
  SPI.transfer( R_RX_PL_WID );
  result = SPI.transfer(0xff);
  csn(HIGH);
     60e:	61 e0       	ldi	r22, 0x01	; 1
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	ce 01       	movw	r24, r28
     614:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>

  return result;
}
     618:	81 2f       	mov	r24, r17
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	08 95       	ret

00000622 <_ZN4RF249availableEPh>:
}

/****************************************************************************/

bool RF24::available(uint8_t* pipe_num)
{
     622:	ef 92       	push	r14
     624:	ff 92       	push	r15
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	ec 01       	movw	r28, r24
     630:	8b 01       	movw	r16, r22
  uint8_t status = get_status();
     632:	0e 94 34 02 	call	0x468	; 0x468 <_ZN4RF2410get_statusEv>
     636:	f8 2e       	mov	r15, r24
  // Too noisy, enable if you really want lots o data!!
  //IF_SERIAL_DEBUG(print_status(status));

  bool result = ( status & _BV(RX_DR) );

  if (result)
     638:	86 fb       	bst	r24, 6
     63a:	ee 24       	eor	r14, r14
     63c:	e0 f8       	bld	r14, 0
     63e:	86 ff       	sbrs	r24, 6
     640:	17 c0       	rjmp	.+46     	; 0x670 <_ZN4RF249availableEPh+0x4e>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
     642:	01 15       	cp	r16, r1
     644:	11 05       	cpc	r17, r1
     646:	41 f0       	breq	.+16     	; 0x658 <_ZN4RF249availableEPh+0x36>
      *pipe_num = ( status >> RX_P_NO ) & B111;
     648:	28 2f       	mov	r18, r24
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	35 95       	asr	r19
     64e:	27 95       	ror	r18
     650:	27 70       	andi	r18, 0x07	; 7
     652:	33 27       	eor	r19, r19
     654:	f8 01       	movw	r30, r16
     656:	20 83       	st	Z, r18
    // Clear the status bit

    // ??? Should this REALLY be cleared now?  Or wait until we
    // actually READ the payload?

    write_register(STATUS,_BV(RX_DR) );
     658:	40 e4       	ldi	r20, 0x40	; 64
     65a:	67 e0       	ldi	r22, 0x07	; 7
     65c:	ce 01       	movw	r24, r28
     65e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN4RF2414write_registerEhh>

    // Handle ack payload receipt
    if ( status & _BV(TX_DS) )
     662:	f5 fe       	sbrs	r15, 5
     664:	05 c0       	rjmp	.+10     	; 0x670 <_ZN4RF249availableEPh+0x4e>
    {
      write_register(STATUS,_BV(TX_DS));
     666:	40 e2       	ldi	r20, 0x20	; 32
     668:	67 e0       	ldi	r22, 0x07	; 7
     66a:	ce 01       	movw	r24, r28
     66c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN4RF2414write_registerEhh>
    }
  }

  return result;
}
     670:	8e 2d       	mov	r24, r14
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	08 95       	ret

00000680 <_ZN4RF249availableEv>:

/****************************************************************************/

bool RF24::available(void)
{
  return available(NULL);
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	0e 94 11 03 	call	0x622	; 0x622 <_ZN4RF249availableEPh>
}
     688:	08 95       	ret

0000068a <_ZN4RF244readEPvh>:
}

/****************************************************************************/

bool RF24::read( void* buf, uint8_t len )
{
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	ec 01       	movw	r28, r24
  // Fetch the payload
  read_payload( buf, len );
     690:	0e 94 bb 01 	call	0x376	; 0x376 <_ZN4RF2412read_payloadEPvh>

  // was this the last of the data available?
  return read_register(FIFO_STATUS) & _BV(RX_EMPTY);
     694:	67 e1       	ldi	r22, 0x17	; 23
     696:	ce 01       	movw	r24, r28
     698:	0e 94 04 01 	call	0x208	; 0x208 <_ZN4RF2413read_registerEh>
}
     69c:	81 70       	andi	r24, 0x01	; 1
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	08 95       	ret

000006a4 <_ZN4RF2412whatHappenedERbS0_S0_>:

/****************************************************************************/

void RF24::whatHappened(bool& tx_ok,bool& tx_fail,bool& rx_ready)
{
     6a4:	ef 92       	push	r14
     6a6:	ff 92       	push	r15
     6a8:	0f 93       	push	r16
     6aa:	1f 93       	push	r17
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	7b 01       	movw	r14, r22
     6b2:	8a 01       	movw	r16, r20
     6b4:	e9 01       	movw	r28, r18
  // Read the status & reset the status in one easy call
  // Or is that such a good idea?
  uint8_t status = write_register(STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     6b6:	40 e7       	ldi	r20, 0x70	; 112
     6b8:	67 e0       	ldi	r22, 0x07	; 7
     6ba:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN4RF2414write_registerEhh>

  // Report to the user what happened
  tx_ok = status & _BV(TX_DS);
     6be:	85 fb       	bst	r24, 5
     6c0:	99 27       	eor	r25, r25
     6c2:	90 f9       	bld	r25, 0
     6c4:	f7 01       	movw	r30, r14
     6c6:	90 83       	st	Z, r25
  tx_fail = status & _BV(MAX_RT);
     6c8:	84 fb       	bst	r24, 4
     6ca:	99 27       	eor	r25, r25
     6cc:	90 f9       	bld	r25, 0
     6ce:	f8 01       	movw	r30, r16
     6d0:	90 83       	st	Z, r25
  rx_ready = status & _BV(RX_DR);
     6d2:	86 fb       	bst	r24, 6
     6d4:	88 27       	eor	r24, r24
     6d6:	80 f9       	bld	r24, 0
     6d8:	88 83       	st	Y, r24
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	08 95       	ret

000006e8 <_ZN4RF245writeEPKvh>:
}

/******************************************************************/

bool RF24::write( const void* buf, uint8_t len )
{
     6e8:	cf 92       	push	r12
     6ea:	df 92       	push	r13
     6ec:	ef 92       	push	r14
     6ee:	ff 92       	push	r15
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <_ZN4RF245writeEPKvh+0x12>
     6fa:	1f 92       	push	r1
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	8c 01       	movw	r16, r24
  bool result = false;

  // Begin the write
  startWrite(buf,len);
     702:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN4RF2410startWriteEPKvh>
  // if I tighted up the retry logic.  (Default settings will be 1500us.
  // Monitor the send
  uint8_t observe_tx;
  uint8_t status;
  //millis_start();
  uint32_t sent_at = millis();
     706:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z6millisv>
     70a:	6b 01       	movw	r12, r22
     70c:	7c 01       	movw	r14, r24
  const uint32_t timeout = 500; //ms to wait for timeout
  do
  {
    status = read_register(OBSERVE_TX,&observe_tx,1);
     70e:	21 e0       	ldi	r18, 0x01	; 1
     710:	ae 01       	movw	r20, r28
     712:	4d 5f       	subi	r20, 0xFD	; 253
     714:	5f 4f       	sbci	r21, 0xFF	; 255
     716:	68 e0       	ldi	r22, 0x08	; 8
     718:	c8 01       	movw	r24, r16
     71a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN4RF2413read_registerEhPhh>
    IF_SERIAL_DEBUG(Serial.print(observe_tx,HEX));
  }
  while( ! ( status & ( _BV(TX_DS) | _BV(MAX_RT) ) ) && ( millis() - sent_at < timeout ) );
     71e:	80 73       	andi	r24, 0x30	; 48
  uint8_t observe_tx;
  uint8_t status;
  //millis_start();
  uint32_t sent_at = millis();
  const uint32_t timeout = 500; //ms to wait for timeout
  do
     720:	69 f4       	brne	.+26     	; 0x73c <_ZN4RF245writeEPKvh+0x54>
  {
    status = read_register(OBSERVE_TX,&observe_tx,1);
    IF_SERIAL_DEBUG(Serial.print(observe_tx,HEX));
  }
  while( ! ( status & ( _BV(TX_DS) | _BV(MAX_RT) ) ) && ( millis() - sent_at < timeout ) );
     722:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z6millisv>
  uint8_t observe_tx;
  uint8_t status;
  //millis_start();
  uint32_t sent_at = millis();
  const uint32_t timeout = 500; //ms to wait for timeout
  do
     726:	ab 01       	movw	r20, r22
     728:	bc 01       	movw	r22, r24
     72a:	4c 19       	sub	r20, r12
     72c:	5d 09       	sbc	r21, r13
     72e:	6e 09       	sbc	r22, r14
     730:	7f 09       	sbc	r23, r15
     732:	44 3f       	cpi	r20, 0xF4	; 244
     734:	51 40       	sbci	r21, 0x01	; 1
     736:	61 05       	cpc	r22, r1
     738:	71 05       	cpc	r23, r1
     73a:	48 f3       	brcs	.-46     	; 0x70e <_ZN4RF245writeEPKvh+0x26>
  // The status tells us three things
  // * The send was successful (TX_DS)
  // * The send failed, too many retries (MAX_RT)
  // * There is an ack packet waiting (RX_DR)
  bool tx_ok, tx_fail;
  whatHappened(tx_ok,tx_fail,ack_payload_available);
     73c:	98 01       	movw	r18, r16
     73e:	2b 5f       	subi	r18, 0xFB	; 251
     740:	3f 4f       	sbci	r19, 0xFF	; 255
     742:	ae 01       	movw	r20, r28
     744:	4f 5f       	subi	r20, 0xFF	; 255
     746:	5f 4f       	sbci	r21, 0xFF	; 255
     748:	be 01       	movw	r22, r28
     74a:	6e 5f       	subi	r22, 0xFE	; 254
     74c:	7f 4f       	sbci	r23, 0xFF	; 255
     74e:	c8 01       	movw	r24, r16
     750:	0e 94 52 03 	call	0x6a4	; 0x6a4 <_ZN4RF2412whatHappenedERbS0_S0_>
  
  //printf("%u%u%u\r\n",tx_ok,tx_fail,ack_payload_available);

  result = tx_ok;
     754:	fa 80       	ldd	r15, Y+2	; 0x02
  IF_SERIAL_DEBUG(Serial.print(result?"...OK.":"...Failed"));

  // Handle the ack packet
  if ( ack_payload_available )
     756:	f8 01       	movw	r30, r16
     758:	85 81       	ldd	r24, Z+5	; 0x05
     75a:	88 23       	and	r24, r24
     75c:	29 f0       	breq	.+10     	; 0x768 <_ZN4RF245writeEPKvh+0x80>
  {
    ack_payload_length = getDynamicPayloadSize();
     75e:	c8 01       	movw	r24, r16
     760:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_ZN4RF2421getDynamicPayloadSizeEv>
     764:	f8 01       	movw	r30, r16
     766:	87 83       	std	Z+7, r24	; 0x07
  }

  // Yay, we are done.

  // Power down
  powerDown();
     768:	c8 01       	movw	r24, r16
     76a:	0e 94 b7 02 	call	0x56e	; 0x56e <_ZN4RF249powerDownEv>

  // Flush buffers (Is this a relic of past experimentation, and not needed anymore??)
  flush_tx();
     76e:	c8 01       	movw	r24, r16
     770:	0e 94 1c 02 	call	0x438	; 0x438 <_ZN4RF248flush_txEv>

  return result;
}
     774:	8f 2d       	mov	r24, r15
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	df 90       	pop	r13
     78a:	cf 90       	pop	r12
     78c:	08 95       	ret

0000078e <_ZN4RF2415openWritingPipeEy>:
}

/****************************************************************************/

void RF24::openWritingPipe(uint64_t value)
{
     78e:	ef 92       	push	r14
     790:	ff 92       	push	r15
     792:	0f 93       	push	r16
     794:	1f 93       	push	r17
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	cd b7       	in	r28, 0x3d	; 61
     79c:	de b7       	in	r29, 0x3e	; 62
     79e:	28 97       	sbiw	r28, 0x08	; 8
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	de bf       	out	0x3e, r29	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	cd bf       	out	0x3d, r28	; 61
     7aa:	7c 01       	movw	r14, r24
     7ac:	09 83       	std	Y+1, r16	; 0x01
     7ae:	1a 83       	std	Y+2, r17	; 0x02
     7b0:	2b 83       	std	Y+3, r18	; 0x03
     7b2:	3c 83       	std	Y+4, r19	; 0x04
     7b4:	4d 83       	std	Y+5, r20	; 0x05
     7b6:	5e 83       	std	Y+6, r21	; 0x06
     7b8:	6f 83       	std	Y+7, r22	; 0x07
     7ba:	78 87       	std	Y+8, r23	; 0x08
  // Note that AVR 8-bit uC's store this LSB first, and the NRF24L01(+)
  // expects it LSB first too, so we're good.

  write_register(RX_ADDR_P0, reinterpret_cast<uint8_t*>(&value), 5);
     7bc:	25 e0       	ldi	r18, 0x05	; 5
     7be:	ae 01       	movw	r20, r28
     7c0:	4f 5f       	subi	r20, 0xFF	; 255
     7c2:	5f 4f       	sbci	r21, 0xFF	; 255
     7c4:	6a e0       	ldi	r22, 0x0A	; 10
     7c6:	0e 94 23 01 	call	0x246	; 0x246 <_ZN4RF2414write_registerEhPKhh>
  write_register(TX_ADDR, reinterpret_cast<uint8_t*>(&value), 5);
     7ca:	25 e0       	ldi	r18, 0x05	; 5
     7cc:	ae 01       	movw	r20, r28
     7ce:	4f 5f       	subi	r20, 0xFF	; 255
     7d0:	5f 4f       	sbci	r21, 0xFF	; 255
     7d2:	60 e1       	ldi	r22, 0x10	; 16
     7d4:	c7 01       	movw	r24, r14
     7d6:	0e 94 23 01 	call	0x246	; 0x246 <_ZN4RF2414write_registerEhPKhh>

  const uint8_t max_payload_size = 32;
  write_register(RX_PW_P0,min(payload_size,max_payload_size));
     7da:	f7 01       	movw	r30, r14
     7dc:	44 81       	ldd	r20, Z+4	; 0x04
     7de:	41 32       	cpi	r20, 0x21	; 33
     7e0:	08 f0       	brcs	.+2      	; 0x7e4 <_ZN4RF2415openWritingPipeEy+0x56>
     7e2:	40 e2       	ldi	r20, 0x20	; 32
     7e4:	61 e1       	ldi	r22, 0x11	; 17
     7e6:	c7 01       	movw	r24, r14
     7e8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN4RF2414write_registerEhh>
}
     7ec:	28 96       	adiw	r28, 0x08	; 8
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	df 91       	pop	r29
     7fa:	cf 91       	pop	r28
     7fc:	1f 91       	pop	r17
     7fe:	0f 91       	pop	r16
     800:	ff 90       	pop	r15
     802:	ef 90       	pop	r14
     804:	08 95       	ret

00000806 <_ZN4RF2415openReadingPipeEhy>:
{
  ERX_P0, ERX_P1, ERX_P2, ERX_P3, ERX_P4, ERX_P5
};

void RF24::openReadingPipe(uint8_t child, uint64_t address)
{
     806:	bf 92       	push	r11
     808:	cf 92       	push	r12
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	28 97       	sbiw	r28, 0x08	; 8
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	de bf       	out	0x3e, r29	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	cd bf       	out	0x3d, r28	; 61
     828:	6c 01       	movw	r12, r24
     82a:	b6 2e       	mov	r11, r22
     82c:	e9 82       	std	Y+1, r14	; 0x01
     82e:	fa 82       	std	Y+2, r15	; 0x02
     830:	0b 83       	std	Y+3, r16	; 0x03
     832:	1c 83       	std	Y+4, r17	; 0x04
     834:	2d 83       	std	Y+5, r18	; 0x05
     836:	3e 83       	std	Y+6, r19	; 0x06
     838:	4f 83       	std	Y+7, r20	; 0x07
     83a:	58 87       	std	Y+8, r21	; 0x08
  // If this is pipe 0, cache the address.  This is needed because
  // openWritingPipe() will overwrite the pipe 0 address, so
  // startListening() will have to restore it.
  if (child == 0)
     83c:	61 11       	cpse	r22, r1
     83e:	0a c0       	rjmp	.+20     	; 0x854 <_ZN4RF2415openReadingPipeEhy+0x4e>
    pipe0_reading_address = address;
     840:	f6 01       	movw	r30, r12
     842:	e0 86       	std	Z+8, r14	; 0x08
     844:	f1 86       	std	Z+9, r15	; 0x09
     846:	02 87       	std	Z+10, r16	; 0x0a
     848:	13 87       	std	Z+11, r17	; 0x0b
     84a:	24 87       	std	Z+12, r18	; 0x0c
     84c:	35 87       	std	Z+13, r19	; 0x0d
     84e:	46 87       	std	Z+14, r20	; 0x0e
     850:	57 87       	std	Z+15, r21	; 0x0f
     852:	06 c0       	rjmp	.+12     	; 0x860 <_ZN4RF2415openReadingPipeEhy+0x5a>

  if (child <= 6)
     854:	f6 e0       	ldi	r31, 0x06	; 6
     856:	f6 17       	cp	r31, r22
     858:	28 f1       	brcs	.+74     	; 0x8a4 <_ZN4RF2415openReadingPipeEhy+0x9e>
  {
    // For pipes 2-5, only write the LSB
    if ( child < 2 )
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	86 17       	cp	r24, r22
     85e:	68 f0       	brcs	.+26     	; 0x87a <_ZN4RF2415openReadingPipeEhy+0x74>
      //write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), 5);
	 	write_register(child_pipe[child], reinterpret_cast<const uint8_t*>(&address), 5);  
     860:	ab 2d       	mov	r26, r11
     862:	b0 e0       	ldi	r27, 0x00	; 0
     864:	a0 50       	subi	r26, 0x00	; 0
     866:	bf 4f       	sbci	r27, 0xFF	; 255
     868:	25 e0       	ldi	r18, 0x05	; 5
     86a:	ae 01       	movw	r20, r28
     86c:	4f 5f       	subi	r20, 0xFF	; 255
     86e:	5f 4f       	sbci	r21, 0xFF	; 255
     870:	6c 91       	ld	r22, X
     872:	c6 01       	movw	r24, r12
     874:	0e 94 23 01 	call	0x246	; 0x246 <_ZN4RF2414write_registerEhPKhh>
     878:	0c c0       	rjmp	.+24     	; 0x892 <_ZN4RF2415openReadingPipeEhy+0x8c>
    else
      write_register(child_pipe[child], reinterpret_cast<const uint8_t*>(&address), 1);
     87a:	a6 2f       	mov	r26, r22
     87c:	b0 e0       	ldi	r27, 0x00	; 0
     87e:	a0 50       	subi	r26, 0x00	; 0
     880:	bf 4f       	sbci	r27, 0xFF	; 255
     882:	21 e0       	ldi	r18, 0x01	; 1
     884:	ae 01       	movw	r20, r28
     886:	4f 5f       	subi	r20, 0xFF	; 255
     888:	5f 4f       	sbci	r21, 0xFF	; 255
     88a:	6c 91       	ld	r22, X
     88c:	c6 01       	movw	r24, r12
     88e:	0e 94 23 01 	call	0x246	; 0x246 <_ZN4RF2414write_registerEhPKhh>

    //write_register(pgm_read_byte(&child_payload_size[child]),payload_size);
	write_register(child_payload_size[child],4);
     892:	eb 2d       	mov	r30, r11
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	ea 5f       	subi	r30, 0xFA	; 250
     898:	fe 4f       	sbci	r31, 0xFE	; 254
     89a:	44 e0       	ldi	r20, 0x04	; 4
     89c:	60 81       	ld	r22, Z
     89e:	c6 01       	movw	r24, r12
     8a0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN4RF2414write_registerEhh>
    // Note it would be more efficient to set all of the bits for all open
    // pipes at once.  However, I thought it would make the calling code
    // more simple to do it this way.
    //write_register(EN_RXADDR,read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
  }
}
     8a4:	28 96       	adiw	r28, 0x08	; 8
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	cd bf       	out	0x3d, r28	; 61
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	1f 91       	pop	r17
     8b6:	0f 91       	pop	r16
     8b8:	ff 90       	pop	r15
     8ba:	ef 90       	pop	r14
     8bc:	df 90       	pop	r13
     8be:	cf 90       	pop	r12
     8c0:	bf 90       	pop	r11
     8c2:	08 95       	ret

000008c4 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e>:
}

/****************************************************************************/

void RF24::setPALevel(rf24_pa_dbm_e level)
{
     8c4:	1f 93       	push	r17
     8c6:	cf 93       	push	r28
     8c8:	df 93       	push	r29
     8ca:	ec 01       	movw	r28, r24
     8cc:	16 2f       	mov	r17, r22
  uint8_t setup = read_register(RF_SETUP) ;
     8ce:	66 e0       	ldi	r22, 0x06	; 6
     8d0:	0e 94 04 01 	call	0x208	; 0x208 <_ZN4RF2413read_registerEh>
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
     8d4:	48 2f       	mov	r20, r24
     8d6:	49 7f       	andi	r20, 0xF9	; 249

  // switch uses RAM (evil!)
  if ( level == RF24_PA_MAX )
     8d8:	13 30       	cpi	r17, 0x03	; 3
     8da:	11 f4       	brne	.+4      	; 0x8e0 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x1c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
     8dc:	46 60       	ori	r20, 0x06	; 6
     8de:	0d c0       	rjmp	.+26     	; 0x8fa <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x36>
  }
  else if ( level == RF24_PA_HIGH )
     8e0:	12 30       	cpi	r17, 0x02	; 2
     8e2:	11 f4       	brne	.+4      	; 0x8e8 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x24>
  {
    setup |= _BV(RF_PWR_HIGH) ;
     8e4:	44 60       	ori	r20, 0x04	; 4
     8e6:	09 c0       	rjmp	.+18     	; 0x8fa <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x36>
  }
  else if ( level == RF24_PA_LOW )
     8e8:	11 30       	cpi	r17, 0x01	; 1
     8ea:	11 f4       	brne	.+4      	; 0x8f0 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x2c>
  {
    setup |= _BV(RF_PWR_LOW);
     8ec:	42 60       	ori	r20, 0x02	; 2
     8ee:	05 c0       	rjmp	.+10     	; 0x8fa <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x36>
  }
  else if ( level == RF24_PA_MIN )
     8f0:	11 23       	and	r17, r17
     8f2:	19 f0       	breq	.+6      	; 0x8fa <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x36>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
     8f4:	14 30       	cpi	r17, 0x04	; 4
     8f6:	09 f4       	brne	.+2      	; 0x8fa <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x36>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
     8f8:	46 60       	ori	r20, 0x06	; 6
  }

  write_register( RF_SETUP, setup ) ;
     8fa:	66 e0       	ldi	r22, 0x06	; 6
     8fc:	ce 01       	movw	r24, r28
     8fe:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN4RF2414write_registerEhh>
}
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	08 95       	ret

0000090a <_ZN4RF2411setDataRateE15rf24_datarate_e>:
}

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	ec 01       	movw	r28, r24
     914:	06 2f       	mov	r16, r22
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
     916:	66 e0       	ldi	r22, 0x06	; 6
     918:	0e 94 04 01 	call	0x208	; 0x208 <_ZN4RF2413read_registerEh>

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
     91c:	1a 82       	std	Y+2, r1	; 0x02
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
     91e:	18 2f       	mov	r17, r24
     920:	17 7d       	andi	r17, 0xD7	; 215
  if( speed == RF24_250KBPS )
     922:	02 30       	cpi	r16, 0x02	; 2
     924:	11 f4       	brne	.+4      	; 0x92a <_ZN4RF2411setDataRateE15rf24_datarate_e+0x20>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
    setup |= _BV( RF_DR_LOW ) ;
     926:	10 62       	ori	r17, 0x20	; 32
     928:	05 c0       	rjmp	.+10     	; 0x934 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x2a>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
     92a:	01 30       	cpi	r16, 0x01	; 1
     92c:	19 f4       	brne	.+6      	; 0x934 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x2a>
    {
      wide_band = true ;
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	8a 83       	std	Y+2, r24	; 0x02
      setup |= _BV(RF_DR_HIGH);
     932:	18 60       	ori	r17, 0x08	; 8
    {
      // 1Mbs
      wide_band = false ;
    }
  }
  write_register(RF_SETUP,setup);
     934:	41 2f       	mov	r20, r17
     936:	66 e0       	ldi	r22, 0x06	; 6
     938:	ce 01       	movw	r24, r28
     93a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN4RF2414write_registerEhh>

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
     93e:	66 e0       	ldi	r22, 0x06	; 6
     940:	ce 01       	movw	r24, r28
     942:	0e 94 04 01 	call	0x208	; 0x208 <_ZN4RF2413read_registerEh>
     946:	18 17       	cp	r17, r24
     948:	19 f0       	breq	.+6      	; 0x950 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x46>
  {
    result = true;
  }
  else
  {
    wide_band = false;
     94a:	1a 82       	std	Y+2, r1	; 0x02

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
  bool result = false;
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	01 c0       	rjmp	.+2      	; 0x952 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x48>
  write_register(RF_SETUP,setup);

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
  {
    result = true;
     950:	81 e0       	ldi	r24, 0x01	; 1
  {
    wide_band = false;
  }

  return result;
}
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	1f 91       	pop	r17
     958:	0f 91       	pop	r16
     95a:	08 95       	ret

0000095c <_ZN4RF2412setCRCLengthE16rf24_crclength_e>:
}

/****************************************************************************/

void RF24::setCRCLength(rf24_crclength_e length)
{
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	ec 01       	movw	r28, r24
     964:	16 2f       	mov	r17, r22
  uint8_t config = read_register(CONFIG) & ~( _BV(CRCO) | _BV(EN_CRC)) ;
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	0e 94 04 01 	call	0x208	; 0x208 <_ZN4RF2413read_registerEh>
     96c:	48 2f       	mov	r20, r24
     96e:	43 7f       	andi	r20, 0xF3	; 243
  
  // switch uses RAM (evil!)
  if ( length == RF24_CRC_DISABLED )
     970:	11 23       	and	r17, r17
     972:	29 f0       	breq	.+10     	; 0x97e <_ZN4RF2412setCRCLengthE16rf24_crclength_e+0x22>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
     974:	11 30       	cpi	r17, 0x01	; 1
     976:	11 f4       	brne	.+4      	; 0x97c <_ZN4RF2412setCRCLengthE16rf24_crclength_e+0x20>
  {
    config |= _BV(EN_CRC);
     978:	48 60       	ori	r20, 0x08	; 8
     97a:	01 c0       	rjmp	.+2      	; 0x97e <_ZN4RF2412setCRCLengthE16rf24_crclength_e+0x22>
  }
  else
  {
    config |= _BV(EN_CRC);
    config |= _BV( CRCO );
     97c:	4c 60       	ori	r20, 0x0C	; 12
  }
  write_register( CONFIG, config ) ;
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	ce 01       	movw	r24, r28
     982:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN4RF2414write_registerEhh>
}
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	1f 91       	pop	r17
     98c:	08 95       	ret

0000098e <_ZN4RF245beginEv>:
}

/****************************************************************************/

void RF24::begin(void)
{
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	ec 01       	movw	r28, r24
	millis_setup();
     994:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z12millis_setupv>
  // Initialize pins
  CE_DDR |= (1<<CE_PIN);
     998:	20 9a       	sbi	0x04, 0	; 4
  CSN_DDR |= (1<<CSN_PIN);
     99a:	21 9a       	sbi	0x04, 1	; 4

  // Initialize SPI bus
  SPI.begin();
     99c:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <_ZN8SPIClass5beginEv>
  SPI.setBitOrder(MSBFIRST);
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_ZN8SPIClass11setBitOrderEh>
  SPI.setDataMode(SPI_MODE0);
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <_ZN8SPIClass11setDataModeEh>
  SPI.setClockDivider(SPI_CLOCK_DIV2);
     9ac:	84 e0       	ldi	r24, 0x04	; 4
     9ae:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <_ZN8SPIClass15setClockDividerEh>

  ce(LOW);
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	ce 01       	movw	r24, r28
     9b8:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN4RF242ceEi>
  csn(HIGH);
     9bc:	61 e0       	ldi	r22, 0x01	; 1
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	ce 01       	movw	r24, r28
     9c2:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN4RF243csnEi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9c6:	81 ee       	ldi	r24, 0xE1	; 225
     9c8:	94 e0       	ldi	r25, 0x04	; 4
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	f1 f7       	brne	.-4      	; 0x9ca <_ZN4RF245beginEv+0x3c>
     9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <_ZN4RF245beginEv+0x42>
     9d0:	00 00       	nop
  _delay_ms( 5 ) ;

  // Set 1500uS (minimum for 32B payload in ESB@250KBPS) timeouts, to make testing a little easier
  // WARNING: If this is ever lowered, either 250KBS mode with AA is broken or maximum packet
  // sizes must never be used. See documentation for a more complete explanation.
  write_register(SETUP_RETR,(B0100 << ARD) | (B1111 << ARC));
     9d2:	4f e4       	ldi	r20, 0x4F	; 79
     9d4:	64 e0       	ldi	r22, 0x04	; 4
     9d6:	ce 01       	movw	r24, r28
     9d8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN4RF2414write_registerEhh>

  // Restore our default PA level
  setPALevel( RF24_PA_MAX ) ;
     9dc:	63 e0       	ldi	r22, 0x03	; 3
     9de:	ce 01       	movw	r24, r28
     9e0:	0e 94 62 04 	call	0x8c4	; 0x8c4 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e>

  // Determine if this is a p or non-p RF24 module and then
  // reset our data rate back to default value. This works
  // because a non-P variant won't allow the data rate to
  // be set to 250Kbps.
  if( setDataRate( RF24_250KBPS ) )
     9e4:	62 e0       	ldi	r22, 0x02	; 2
     9e6:	ce 01       	movw	r24, r28
     9e8:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4RF2411setDataRateE15rf24_datarate_e>
     9ec:	88 23       	and	r24, r24
     9ee:	11 f0       	breq	.+4      	; 0x9f4 <_ZN4RF245beginEv+0x66>
  {
    p_variant = true ;
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	8b 83       	std	Y+3, r24	; 0x03
  }
  
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	ce 01       	movw	r24, r28
     9f8:	0e 94 85 04 	call	0x90a	; 0x90a <_ZN4RF2411setDataRateE15rf24_datarate_e>

  // Initialize CRC and request 2-byte (16bit) CRC
  setCRCLength( RF24_CRC_16 ) ;
     9fc:	62 e0       	ldi	r22, 0x02	; 2
     9fe:	ce 01       	movw	r24, r28
     a00:	0e 94 ae 04 	call	0x95c	; 0x95c <_ZN4RF2412setCRCLengthE16rf24_crclength_e>
  
  // Disable dynamic payloads, to match dynamic_payloads_enabled setting
  write_register(DYNPD,0);
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	6c e1       	ldi	r22, 0x1C	; 28
     a08:	ce 01       	movw	r24, r28
     a0a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN4RF2414write_registerEhh>

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     a0e:	40 e7       	ldi	r20, 0x70	; 112
     a10:	67 e0       	ldi	r22, 0x07	; 7
     a12:	ce 01       	movw	r24, r28
     a14:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN4RF2414write_registerEhh>

	write_register(CONFIG, read_register(CONFIG) | 0x70);
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	ce 01       	movw	r24, r28
     a1c:	0e 94 04 01 	call	0x208	; 0x208 <_ZN4RF2413read_registerEh>
     a20:	48 2f       	mov	r20, r24
     a22:	40 67       	ori	r20, 0x70	; 112
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	ce 01       	movw	r24, r28
     a28:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN4RF2414write_registerEhh>
  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  setChannel(107);
     a2c:	6b e6       	ldi	r22, 0x6B	; 107
     a2e:	ce 01       	movw	r24, r28
     a30:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_ZN4RF2410setChannelEh>

  // Flush buffers
  flush_rx();
     a34:	ce 01       	movw	r24, r28
     a36:	0e 94 04 02 	call	0x408	; 0x408 <_ZN4RF248flush_rxEv>
  flush_tx();
     a3a:	ce 01       	movw	r24, r28
     a3c:	0e 94 1c 02 	call	0x438	; 0x438 <_ZN4RF248flush_txEv>
}
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	08 95       	ret

00000a46 <_ZN4RF2410setRetriesEhh>:
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
     a46:	4f 70       	andi	r20, 0x0F	; 15
     a48:	20 e1       	ldi	r18, 0x10	; 16
     a4a:	62 9f       	mul	r22, r18
     a4c:	b0 01       	movw	r22, r0
     a4e:	11 24       	eor	r1, r1
     a50:	46 2b       	or	r20, r22
     a52:	64 e0       	ldi	r22, 0x04	; 4
     a54:	0e 94 52 01 	call	0x2a4	; 0x2a4 <_ZN4RF2414write_registerEhh>
     a58:	08 95       	ret

00000a5a <_ZN4RF2414gabi_read_rf24Eh>:
}


uint8_t RF24::gabi_read_rf24(uint8_t reg)
{
	return read_register(reg);
     a5a:	0e 94 04 01 	call	0x208	; 0x208 <_ZN4RF2413read_registerEh>
}
     a5e:	08 95       	ret

00000a60 <_ZN4RF2414gabi_read_rf24EhPhh>:

uint8_t RF24::gabi_read_rf24(uint8_t reg, uint8_t* buf, uint8_t len)
{
	return read_register(reg,buf,len);
     a60:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_ZN4RF2413read_registerEhPhh>
}
     a64:	08 95       	ret

00000a66 <_Z12lcd_check_BFv>:
{
	// busy flag 'mirror'
    uint8_t busy_flag_copy;                         

	// set D7 data direction to input
    lcd_D7_ddr &= ~(1<<lcd_D7_bit);  
     a66:	57 98       	cbi	0x0a, 7	; 10
	// select the Instruction Register (RS low)               
    RS_LOW;    
     a68:	58 98       	cbi	0x0b, 0	; 11
	// read from LCD module (RW high)            
    RW_HIGH;                 
     a6a:	59 9a       	sbi	0x0b, 1	; 11

    do
    {
        busy_flag_copy = 0;          
		// Enable pin high               
        E_HIGH;    
     a6c:	5a 9a       	sbi	0x0b, 2	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a6e:	00 00       	nop
		// implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)           
        _delay_us(1);                               

		// get actual busy flag status
        busy_flag_copy |= (lcd_D7_pin & (1<<lcd_D7_bit));  
     a70:	89 b1       	in	r24, 0x09	; 9

		// Enable pin low
        E_LOW;             
     a72:	5a 98       	cbi	0x0b, 2	; 11
     a74:	00 00       	nop
		// implement 'Address hold time' (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS ) 
        _delay_us(1);                               
        
		// read and discard alternate nibbles (D3 information)
		// Enable pin high
        E_HIGH;      
     a76:	5a 9a       	sbi	0x0b, 2	; 11
     a78:	00 00       	nop
		// implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)         
        _delay_us(1);  
		// Enable pin low                             
        E_LOW;             
     a7a:	5a 98       	cbi	0x0b, 2	; 11
     a7c:	00 00       	nop
	// select the Instruction Register (RS low)               
    RS_LOW;    
	// read from LCD module (RW high)            
    RW_HIGH;                 

    do
     a7e:	88 23       	and	r24, r24
     a80:	ac f3       	brlt	.-22     	; 0xa6c <_Z12lcd_check_BFv+0x6>
        
    } while (busy_flag_copy); // check again if busy flag was high

	// arrive here if busy flag is clear -  clean up and return 
	// write to LCD module (RW low)
    RW_LOW;              
     a82:	59 98       	cbi	0x0b, 1	; 11
	// reset D7 data direction to output  
    lcd_D7_ddr |= (1<<lcd_D7_bit);                  
     a84:	57 9a       	sbi	0x0a, 7	; 10
     a86:	08 95       	ret

00000a88 <_Z12pulse_enablev>:
}

void pulse_enable()
{
  E_LOW;
     a88:	5a 98       	cbi	0x0b, 2	; 11
     a8a:	00 00       	nop
  _delay_us(1);
  E_HIGH;
     a8c:	5a 9a       	sbi	0x0b, 2	; 11
     a8e:	00 00       	nop
  _delay_us(1);
  E_LOW;
     a90:	5a 98       	cbi	0x0b, 2	; 11
     a92:	81 e2       	ldi	r24, 0x21	; 33
     a94:	8a 95       	dec	r24
     a96:	f1 f7       	brne	.-4      	; 0xa94 <_Z12pulse_enablev+0xc>
     a98:	00 00       	nop
     a9a:	08 95       	ret

00000a9c <_Z9gabi_insthh>:
}


void gabi_inst(uint8_t RS_pin, uint8_t data) // rs_pin 1 for data , 0 for instructions
{
	if (RS_pin > 0) RS_HIGH; else RS_LOW;
     a9c:	88 23       	and	r24, r24
     a9e:	11 f0       	breq	.+4      	; 0xaa4 <_Z9gabi_insthh+0x8>
     aa0:	58 9a       	sbi	0x0b, 0	; 11
     aa2:	01 c0       	rjmp	.+2      	; 0xaa6 <_Z9gabi_insthh+0xa>
     aa4:	58 98       	cbi	0x0b, 0	; 11
    RW_LOW;
     aa6:	59 98       	cbi	0x0b, 1	; 11
	LCD_DDR |= 0xF0;
     aa8:	8a b1       	in	r24, 0x0a	; 10
     aaa:	80 6f       	ori	r24, 0xF0	; 240
     aac:	8a b9       	out	0x0a, r24	; 10
	uint8_t d5,d6,d7,d8;
	d5=0|(0b00010000&data);
	d6=0|(0b00100000&data);
	d7=0|(0b01000000&data);
	d8=0|(0b10000000&data);
	LCD_PORT&=0x0F;
     aae:	8b b1       	in	r24, 0x0b	; 11
     ab0:	8f 70       	andi	r24, 0x0F	; 15
     ab2:	8b b9       	out	0x0b, r24	; 11
	LCD_PORT|=d5;
     ab4:	8b b1       	in	r24, 0x0b	; 11
{
	if (RS_pin > 0) RS_HIGH; else RS_LOW;
    RW_LOW;
	LCD_DDR |= 0xF0;
	uint8_t d5,d6,d7,d8;
	d5=0|(0b00010000&data);
     ab6:	96 2f       	mov	r25, r22
     ab8:	90 71       	andi	r25, 0x10	; 16
	d6=0|(0b00100000&data);
	d7=0|(0b01000000&data);
	d8=0|(0b10000000&data);
	LCD_PORT&=0x0F;
	LCD_PORT|=d5;
     aba:	89 2b       	or	r24, r25
     abc:	8b b9       	out	0x0b, r24	; 11
	LCD_PORT|=d6;
     abe:	8b b1       	in	r24, 0x0b	; 11
	if (RS_pin > 0) RS_HIGH; else RS_LOW;
    RW_LOW;
	LCD_DDR |= 0xF0;
	uint8_t d5,d6,d7,d8;
	d5=0|(0b00010000&data);
	d6=0|(0b00100000&data);
     ac0:	96 2f       	mov	r25, r22
     ac2:	90 72       	andi	r25, 0x20	; 32
	d7=0|(0b01000000&data);
	d8=0|(0b10000000&data);
	LCD_PORT&=0x0F;
	LCD_PORT|=d5;
	LCD_PORT|=d6;
     ac4:	89 2b       	or	r24, r25
     ac6:	8b b9       	out	0x0b, r24	; 11
	LCD_PORT|=d7;
     ac8:	8b b1       	in	r24, 0x0b	; 11
    RW_LOW;
	LCD_DDR |= 0xF0;
	uint8_t d5,d6,d7,d8;
	d5=0|(0b00010000&data);
	d6=0|(0b00100000&data);
	d7=0|(0b01000000&data);
     aca:	96 2f       	mov	r25, r22
     acc:	90 74       	andi	r25, 0x40	; 64
	d8=0|(0b10000000&data);
	LCD_PORT&=0x0F;
	LCD_PORT|=d5;
	LCD_PORT|=d6;
	LCD_PORT|=d7;
     ace:	89 2b       	or	r24, r25
     ad0:	8b b9       	out	0x0b, r24	; 11
	LCD_PORT|=d8;
     ad2:	8b b1       	in	r24, 0x0b	; 11
	LCD_DDR |= 0xF0;
	uint8_t d5,d6,d7,d8;
	d5=0|(0b00010000&data);
	d6=0|(0b00100000&data);
	d7=0|(0b01000000&data);
	d8=0|(0b10000000&data);
     ad4:	60 78       	andi	r22, 0x80	; 128
	LCD_PORT&=0x0F;
	LCD_PORT|=d5;
	LCD_PORT|=d6;
	LCD_PORT|=d7;
	LCD_PORT|=d8;
     ad6:	68 2b       	or	r22, r24
     ad8:	6b b9       	out	0x0b, r22	; 11
	pulse_enable();
     ada:	0e 94 44 05 	call	0xa88	; 0xa88 <_Z12pulse_enablev>
     ade:	08 95       	ret

00000ae0 <_Z8gabi_cmdh>:
}

void gabi_cmd(uint8_t data)
{
     ae0:	cf 93       	push	r28
     ae2:	c8 2f       	mov	r28, r24
	gabi_inst(0,data);
     ae4:	68 2f       	mov	r22, r24
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_Z9gabi_insthh>
	gabi_inst(0,data<<4);
     aec:	6c 2f       	mov	r22, r28
     aee:	62 95       	swap	r22
     af0:	60 7f       	andi	r22, 0xF0	; 240
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_Z9gabi_insthh>
}
     af8:	cf 91       	pop	r28
     afa:	08 95       	ret

00000afc <_Z8lcd_initv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     afc:	2f e9       	ldi	r18, 0x9F	; 159
     afe:	86 e8       	ldi	r24, 0x86	; 134
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	21 50       	subi	r18, 0x01	; 1
     b04:	80 40       	sbci	r24, 0x00	; 0
     b06:	90 40       	sbci	r25, 0x00	; 0
     b08:	e1 f7       	brne	.-8      	; 0xb02 <_Z8lcd_initv+0x6>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <_Z8lcd_initv+0x10>
     b0c:	00 00       	nop
#define RW_HIGH lcd_RW_port |= (1<<lcd_RW_bit)

void lcd_init(void)
{
	_delay_ms(500); // wait
	LCD_DDR = 0xFF;
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	8a b9       	out	0x0a, r24	; 10
	LCD_PORT = 0xFF;
     b12:	8b b9       	out	0x0b, r24	; 11
	RS_LOW;
     b14:	58 98       	cbi	0x0b, 0	; 11
	E_LOW;
     b16:	5a 98       	cbi	0x0b, 2	; 11
	RW_LOW;
     b18:	59 98       	cbi	0x0b, 1	; 11
	gabi_inst(0,lcd_FunctionReset); //1 reset
     b1a:	60 e3       	ldi	r22, 0x30	; 48
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_Z9gabi_insthh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b22:	84 e6       	ldi	r24, 0x64	; 100
     b24:	94 e0       	ldi	r25, 0x04	; 4
     b26:	01 97       	sbiw	r24, 0x01	; 1
     b28:	f1 f7       	brne	.-4      	; 0xb26 <_Z8lcd_initv+0x2a>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <_Z8lcd_initv+0x30>
     b2c:	00 00       	nop
	_delay_us(4500);	
	gabi_inst(0,lcd_FunctionReset); //2 reset
     b2e:	60 e3       	ldi	r22, 0x30	; 48
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_Z9gabi_insthh>
     b36:	92 e3       	ldi	r25, 0x32	; 50
     b38:	9a 95       	dec	r25
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <_Z8lcd_initv+0x3c>
	_delay_us(150);
	gabi_inst(0,lcd_FunctionReset); //3 reset
     b3c:	60 e3       	ldi	r22, 0x30	; 48
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_Z9gabi_insthh>
	
	// 4bit mode
	lcd_check_BF();
     b44:	0e 94 33 05 	call	0xa66	; 0xa66 <_Z12lcd_check_BFv>
	gabi_inst(0,lcd_FunctionSet4bit); //only high nimbble needed here
     b48:	68 e2       	ldi	r22, 0x28	; 40
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_Z9gabi_insthh>
	lcd_check_BF();
     b50:	0e 94 33 05 	call	0xa66	; 0xa66 <_Z12lcd_check_BFv>
	gabi_cmd(lcd_FunctionSet4bit); //now both nimbbles
     b54:	88 e2       	ldi	r24, 0x28	; 40
     b56:	0e 94 70 05 	call	0xae0	; 0xae0 <_Z8gabi_cmdh>
	
	// display off
	lcd_check_BF();
     b5a:	0e 94 33 05 	call	0xa66	; 0xa66 <_Z12lcd_check_BFv>
	gabi_cmd(lcd_DisplayOff);
     b5e:	88 e0       	ldi	r24, 0x08	; 8
     b60:	0e 94 70 05 	call	0xae0	; 0xae0 <_Z8gabi_cmdh>
	
	// clear
	lcd_check_BF();
     b64:	0e 94 33 05 	call	0xa66	; 0xa66 <_Z12lcd_check_BFv>
	gabi_cmd(lcd_Clear);
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	0e 94 70 05 	call	0xae0	; 0xae0 <_Z8gabi_cmdh>

	// Entry mode	
	lcd_check_BF();
     b6e:	0e 94 33 05 	call	0xa66	; 0xa66 <_Z12lcd_check_BFv>
	gabi_cmd(lcd_EntryMode);
     b72:	86 e0       	ldi	r24, 0x06	; 6
     b74:	0e 94 70 05 	call	0xae0	; 0xae0 <_Z8gabi_cmdh>

	// Display On
	lcd_check_BF();
     b78:	0e 94 33 05 	call	0xa66	; 0xa66 <_Z12lcd_check_BFv>
	gabi_cmd(lcd_DisplayOn);
     b7c:	8f e0       	ldi	r24, 0x0F	; 15
     b7e:	0e 94 70 05 	call	0xae0	; 0xae0 <_Z8gabi_cmdh>
     b82:	08 95       	ret

00000b84 <_Z9gabi_datah>:
	gabi_inst(0,data);
	gabi_inst(0,data<<4);
}

void gabi_data(uint8_t data)
{
     b84:	cf 93       	push	r28
     b86:	c8 2f       	mov	r28, r24
	gabi_inst(1,data);
     b88:	68 2f       	mov	r22, r24
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_Z9gabi_insthh>
	gabi_inst(1,data<<4);
     b90:	6c 2f       	mov	r22, r28
     b92:	62 95       	swap	r22
     b94:	60 7f       	andi	r22, 0xF0	; 240
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	0e 94 4e 05 	call	0xa9c	; 0xa9c <_Z9gabi_insthh>
}
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <_Z9gabi_homev>:

void gabi_home()
{
	lcd_check_BF();
     ba0:	0e 94 33 05 	call	0xa66	; 0xa66 <_Z12lcd_check_BFv>
	gabi_cmd(0x02);
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	0e 94 70 05 	call	0xae0	; 0xae0 <_Z8gabi_cmdh>
     baa:	83 ef       	ldi	r24, 0xF3	; 243
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	01 97       	sbiw	r24, 0x01	; 1
     bb0:	f1 f7       	brne	.-4      	; 0xbae <_Z9gabi_homev+0xe>
     bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <_Z9gabi_homev+0x14>
     bb4:	00 00       	nop
     bb6:	08 95       	ret

00000bb8 <_Z10gabi_clearv>:
	_delay_us(2000);
}

void gabi_clear()
{
	lcd_check_BF();
     bb8:	0e 94 33 05 	call	0xa66	; 0xa66 <_Z12lcd_check_BFv>
	gabi_cmd(lcd_Clear);
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	0e 94 70 05 	call	0xae0	; 0xae0 <_Z8gabi_cmdh>
     bc2:	08 95       	ret

00000bc4 <_Z9gabi_gotohh>:
}

void gabi_goto(uint8_t col, uint8_t row)
{
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	00 d0       	rcall	.+0      	; 0xbce <_Z9gabi_gotohh+0xa>
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <_Z9gabi_gotohh+0xc>
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	18 2f       	mov	r17, r24
     bd6:	06 2f       	mov	r16, r22
	lcd_check_BF();
     bd8:	0e 94 33 05 	call	0xa66	; 0xa66 <_Z12lcd_check_BFv>
	int row_offsets[] = {0x00, 0x40};
     bdc:	1a 82       	std	Y+2, r1	; 0x02
     bde:	19 82       	std	Y+1, r1	; 0x01
     be0:	20 e4       	ldi	r18, 0x40	; 64
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	3c 83       	std	Y+4, r19	; 0x04
     be6:	2b 83       	std	Y+3, r18	; 0x03
	gabi_cmd(LCD_SETDDRAMADDR | (col + row_offsets[row]));
     be8:	e0 2f       	mov	r30, r16
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	ee 0f       	add	r30, r30
     bee:	ff 1f       	adc	r31, r31
     bf0:	ec 0f       	add	r30, r28
     bf2:	fd 1f       	adc	r31, r29
     bf4:	81 81       	ldd	r24, Z+1	; 0x01
     bf6:	81 0f       	add	r24, r17
     bf8:	80 68       	ori	r24, 0x80	; 128
     bfa:	0e 94 70 05 	call	0xae0	; 0xae0 <_Z8gabi_cmdh>
}
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	1f 91       	pop	r17
     c0c:	0f 91       	pop	r16
     c0e:	08 95       	ret

00000c10 <_Z11gabi_stringPc>:

void gabi_string(char *data)
{
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	ec 01       	movw	r28, r24
	lcd_check_BF();
     c16:	0e 94 33 05 	call	0xa66	; 0xa66 <_Z12lcd_check_BFv>
	while (*data > 0)
     c1a:	88 81       	ld	r24, Y
     c1c:	88 23       	and	r24, r24
     c1e:	31 f0       	breq	.+12     	; 0xc2c <_Z11gabi_stringPc+0x1c>
	lcd_check_BF();
	int row_offsets[] = {0x00, 0x40};
	gabi_cmd(LCD_SETDDRAMADDR | (col + row_offsets[row]));
}

void gabi_string(char *data)
     c20:	21 96       	adiw	r28, 0x01	; 1
{
	lcd_check_BF();
	while (*data > 0)
	{
		gabi_data(*data);
     c22:	0e 94 c2 05 	call	0xb84	; 0xb84 <_Z9gabi_datah>
}

void gabi_string(char *data)
{
	lcd_check_BF();
	while (*data > 0)
     c26:	89 91       	ld	r24, Y+
     c28:	81 11       	cpse	r24, r1
     c2a:	fb cf       	rjmp	.-10     	; 0xc22 <_Z11gabi_stringPc+0x12>
	{
		gabi_data(*data);
		data++;
	}
}
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	08 95       	ret

00000c32 <_Z20get_relay1_emr_statev>:
#define RELAY2_SSR_PIN PORTC4
#define RELAY_DELAY 50

uint8_t get_relay1_emr_state()
{
	return ((RELAY1_EMR_PORT >> RELAY1_EMR_PIN) & 1);
     c32:	88 b1       	in	r24, 0x08	; 8
     c34:	82 fb       	bst	r24, 2
     c36:	88 27       	eor	r24, r24
     c38:	80 f9       	bld	r24, 0
}
     c3a:	08 95       	ret

00000c3c <_Z22update_lcd_relay_statev>:

void update_lcd_relay_state()
{
	gabi_goto(0,0);
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_Z9gabi_gotohh>
	if (get_relay1_emr_state()) gabi_string((char*)"On "); else gabi_string((char*)"Off");
     c44:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z20get_relay1_emr_statev>
     c48:	88 23       	and	r24, r24
     c4a:	29 f0       	breq	.+10     	; 0xc56 <_Z22update_lcd_relay_statev+0x1a>
     c4c:	8c e0       	ldi	r24, 0x0C	; 12
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
     c54:	08 95       	ret
     c56:	80 e1       	ldi	r24, 0x10	; 16
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
     c5e:	08 95       	ret

00000c60 <_Z11init_relaysv>:
}

void init_relays()
{
	RELAY1_EMR_DDR |= (1<<RELAY1_EMR_PIN);
     c60:	3a 9a       	sbi	0x07, 2	; 7
	RELAY2_EMR_DDR |= (1<<RELAY2_EMR_PIN);
     c62:	3b 9a       	sbi	0x07, 3	; 7
	RELAY2_SSR_DDR |= (1<<RELAY2_SSR_PIN);
     c64:	3c 9a       	sbi	0x07, 4	; 7
	RELAY1_EMR_PORT&=~(1<<RELAY1_EMR_PIN);
     c66:	42 98       	cbi	0x08, 2	; 8
	RELAY2_EMR_PORT&=~(1<<RELAY2_EMR_PIN);
     c68:	43 98       	cbi	0x08, 3	; 8
	RELAY2_SSR_PORT&=~(1<<RELAY2_SSR_PIN);
     c6a:	44 98       	cbi	0x08, 4	; 8
	update_lcd_relay_state();
     c6c:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_Z22update_lcd_relay_statev>
     c70:	08 95       	ret

00000c72 <_Z16relays_power_offv>:
}

void relays_power_off()
{
	RELAY2_SSR_PORT |= (1<<RELAY2_SSR_PIN);
     c72:	44 9a       	sbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c74:	83 ed       	ldi	r24, 0xD3	; 211
     c76:	90 e3       	ldi	r25, 0x30	; 48
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	f1 f7       	brne	.-4      	; 0xc78 <_Z16relays_power_offv+0x6>
     c7c:	00 c0       	rjmp	.+0      	; 0xc7e <_Z16relays_power_offv+0xc>
     c7e:	00 00       	nop
	_delay_ms(RELAY_DELAY);
	RELAY2_EMR_PORT &= ~(1<<RELAY2_EMR_PIN);
     c80:	43 98       	cbi	0x08, 3	; 8
     c82:	83 ed       	ldi	r24, 0xD3	; 211
     c84:	90 e3       	ldi	r25, 0x30	; 48
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	f1 f7       	brne	.-4      	; 0xc86 <_Z16relays_power_offv+0x14>
     c8a:	00 c0       	rjmp	.+0      	; 0xc8c <_Z16relays_power_offv+0x1a>
     c8c:	00 00       	nop
	_delay_ms(RELAY_DELAY);
	RELAY2_SSR_PORT &= ~(1<<RELAY2_SSR_PIN);
     c8e:	44 98       	cbi	0x08, 4	; 8
     c90:	83 ed       	ldi	r24, 0xD3	; 211
     c92:	90 e3       	ldi	r25, 0x30	; 48
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <_Z16relays_power_offv+0x22>
     c98:	00 c0       	rjmp	.+0      	; 0xc9a <_Z16relays_power_offv+0x28>
     c9a:	00 00       	nop
	_delay_ms(RELAY_DELAY);
	RELAY1_EMR_PORT &= ~(1<<RELAY1_EMR_PIN);
     c9c:	42 98       	cbi	0x08, 2	; 8
	update_lcd_relay_state();
     c9e:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_Z22update_lcd_relay_statev>
     ca2:	08 95       	ret

00000ca4 <_Z15relays_power_onv>:
}

void relays_power_on()
{
	RELAY1_EMR_PORT |= (1<<RELAY1_EMR_PIN);
     ca4:	42 9a       	sbi	0x08, 2	; 8
     ca6:	83 ed       	ldi	r24, 0xD3	; 211
     ca8:	90 e3       	ldi	r25, 0x30	; 48
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	f1 f7       	brne	.-4      	; 0xcaa <_Z15relays_power_onv+0x6>
     cae:	00 c0       	rjmp	.+0      	; 0xcb0 <_Z15relays_power_onv+0xc>
     cb0:	00 00       	nop
	_delay_ms(RELAY_DELAY);
	RELAY2_SSR_PORT |= (1<<RELAY2_SSR_PIN);
     cb2:	44 9a       	sbi	0x08, 4	; 8
     cb4:	83 ed       	ldi	r24, 0xD3	; 211
     cb6:	90 e3       	ldi	r25, 0x30	; 48
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	f1 f7       	brne	.-4      	; 0xcb8 <_Z15relays_power_onv+0x14>
     cbc:	00 c0       	rjmp	.+0      	; 0xcbe <_Z15relays_power_onv+0x1a>
     cbe:	00 00       	nop
	_delay_ms(RELAY_DELAY);
	RELAY2_EMR_PORT |= (1<<RELAY2_EMR_PIN);
     cc0:	43 9a       	sbi	0x08, 3	; 8
     cc2:	83 ed       	ldi	r24, 0xD3	; 211
     cc4:	90 e3       	ldi	r25, 0x30	; 48
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	f1 f7       	brne	.-4      	; 0xcc6 <_Z15relays_power_onv+0x22>
     cca:	00 c0       	rjmp	.+0      	; 0xccc <_Z15relays_power_onv+0x28>
     ccc:	00 00       	nop
	_delay_ms(RELAY_DELAY);
	RELAY2_SSR_PORT &= ~(1<<RELAY2_SSR_PIN);
     cce:	44 98       	cbi	0x08, 4	; 8
	update_lcd_relay_state();
     cd0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <_Z22update_lcd_relay_statev>
     cd4:	08 95       	ret

00000cd6 <_Z12setup_timersv>:
int overflow_count, timer1_fire;
int p_sec, p_min, p_hour, p_of;

void setup_timers()
{
	overflow_count=0;
     cd6:	10 92 b3 01 	sts	0x01B3, r1
     cda:	10 92 b2 01 	sts	0x01B2, r1

	//Timer setup
	cli();
     cde:	f8 94       	cli
	TCCR2A = 0;
     ce0:	10 92 b0 00 	sts	0x00B0, r1
	TCCR2B = 0;
     ce4:	10 92 b1 00 	sts	0x00B1, r1
	TCNT2  = 0;
     ce8:	10 92 b2 00 	sts	0x00B2, r1
	OCR2A  = 78;
     cec:	8e e4       	ldi	r24, 0x4E	; 78
     cee:	80 93 b3 00 	sts	0x00B3, r24

	TCCR1A = 0;
     cf2:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;
     cf6:	10 92 81 00 	sts	0x0081, r1
	TCNT1  = 0;
     cfa:	10 92 85 00 	sts	0x0085, r1
     cfe:	10 92 84 00 	sts	0x0084, r1
	OCR1A = 976;
     d02:	80 ed       	ldi	r24, 0xD0	; 208
     d04:	93 e0       	ldi	r25, 0x03	; 3
     d06:	90 93 89 00 	sts	0x0089, r25
     d0a:	80 93 88 00 	sts	0x0088, r24
	//TCCR1B |= (1 << CS10) | (1 << CS12) | (1 << WGM12);     // prescaler 128, set CTC mode. with OCR 10000, TIMER1_COMPA_vect will fire every 1 second
	sei();
     d0e:	78 94       	sei
	
	p_sec=0;
     d10:	10 92 af 01 	sts	0x01AF, r1
     d14:	10 92 ae 01 	sts	0x01AE, r1
	p_min=0;
     d18:	10 92 ad 01 	sts	0x01AD, r1
     d1c:	10 92 ac 01 	sts	0x01AC, r1
	p_hour=0;
     d20:	10 92 ab 01 	sts	0x01AB, r1
     d24:	10 92 aa 01 	sts	0x01AA, r1
	p_of=0;	
     d28:	10 92 a9 01 	sts	0x01A9, r1
     d2c:	10 92 a8 01 	sts	0x01A8, r1
	timer1_fire=0;
     d30:	10 92 b1 01 	sts	0x01B1, r1
     d34:	10 92 b0 01 	sts	0x01B0, r1
     d38:	08 95       	ret

00000d3a <_Z11stop_timer2v>:
}

void stop_timer2()
{
	TCNT2=0;
     d3a:	10 92 b2 00 	sts	0x00B2, r1
	TCCR2B=0;
     d3e:	10 92 b1 00 	sts	0x00B1, r1
	TCCR2A=0;
     d42:	10 92 b0 00 	sts	0x00B0, r1
	TIMSK2 &= ~(1 << OCIE2A);
     d46:	e0 e7       	ldi	r30, 0x70	; 112
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	8d 7f       	andi	r24, 0xFD	; 253
     d4e:	80 83       	st	Z, r24
     d50:	08 95       	ret

00000d52 <_Z12start_timer2v>:
}

void start_timer2()
{
	if (get_relay1_emr_state() == 0)
     d52:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z20get_relay1_emr_statev>
     d56:	81 11       	cpse	r24, r1
     d58:	1d c0       	rjmp	.+58     	; 0xd94 <_Z12start_timer2v+0x42>
	{
		TCNT2=0;
     d5a:	10 92 b2 00 	sts	0x00B2, r1
		TCCR2A = (1 << WGM21);
     d5e:	82 e0       	ldi	r24, 0x02	; 2
     d60:	80 93 b0 00 	sts	0x00B0, r24
		TCCR2B = (1 << CS20) | (1 << CS22);     // prescaler 128, set CTC mode. with OCR 157, TIMER0_COMPA_vect will fire every 0.01 sec (100 OF = 1 Sec)
     d64:	85 e0       	ldi	r24, 0x05	; 5
     d66:	80 93 b1 00 	sts	0x00B1, r24
		p_of=0;
     d6a:	10 92 a9 01 	sts	0x01A9, r1
     d6e:	10 92 a8 01 	sts	0x01A8, r1
		p_hour=0;
     d72:	10 92 ab 01 	sts	0x01AB, r1
     d76:	10 92 aa 01 	sts	0x01AA, r1
		p_min=0;
     d7a:	10 92 ad 01 	sts	0x01AD, r1
     d7e:	10 92 ac 01 	sts	0x01AC, r1
		p_sec=0;
     d82:	10 92 af 01 	sts	0x01AF, r1
     d86:	10 92 ae 01 	sts	0x01AE, r1
		TIMSK2 |= (1 << OCIE2A);
     d8a:	e0 e7       	ldi	r30, 0x70	; 112
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	82 60       	ori	r24, 0x02	; 2
     d92:	80 83       	st	Z, r24
     d94:	08 95       	ret

00000d96 <_Z12start_timer1v>:
	TIMSK1 &= ~(1 << OCIE1A);
}

void start_timer1()
{
	TCNT1=0;
     d96:	10 92 85 00 	sts	0x0085, r1
     d9a:	10 92 84 00 	sts	0x0084, r1
	TCCR1B |= (1 << CS10) | (1 << WGM12) | (1 << CS12);     // prescaler 1024, set CTC mode. with OCR 976, TIMER1_COMPA_vect will fire every 1 Seconds.
     d9e:	e1 e8       	ldi	r30, 0x81	; 129
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	8d 60       	ori	r24, 0x0D	; 13
     da6:	80 83       	st	Z, r24
	overflow_count=0;
     da8:	10 92 b3 01 	sts	0x01B3, r1
     dac:	10 92 b2 01 	sts	0x01B2, r1
	TIMSK1 |= (1 << OCIE1A);		
     db0:	ef e6       	ldi	r30, 0x6F	; 111
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	82 60       	ori	r24, 0x02	; 2
     db8:	80 83       	st	Z, r24
     dba:	08 95       	ret

00000dbc <__vector_11>:
}

ISR(TIMER1_COMPA_vect)          // timer compare interrupt service routine
{
     dbc:	1f 92       	push	r1
     dbe:	0f 92       	push	r0
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	0f 92       	push	r0
     dc4:	11 24       	eor	r1, r1
     dc6:	8f 93       	push	r24
     dc8:	9f 93       	push	r25
	overflow_count++;
     dca:	80 91 b2 01 	lds	r24, 0x01B2
     dce:	90 91 b3 01 	lds	r25, 0x01B3
     dd2:	01 96       	adiw	r24, 0x01	; 1
     dd4:	90 93 b3 01 	sts	0x01B3, r25
     dd8:	80 93 b2 01 	sts	0x01B2, r24
	if (overflow_count > 30) 
     ddc:	4f 97       	sbiw	r24, 0x1f	; 31
     dde:	54 f0       	brlt	.+20     	; 0xdf4 <__vector_11+0x38>
	{
		timer1_fire = 1;
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	90 93 b1 01 	sts	0x01B1, r25
     de8:	80 93 b0 01 	sts	0x01B0, r24
		overflow_count=0;
     dec:	10 92 b3 01 	sts	0x01B3, r1
     df0:	10 92 b2 01 	sts	0x01B2, r1
	}
}
     df4:	9f 91       	pop	r25
     df6:	8f 91       	pop	r24
     df8:	0f 90       	pop	r0
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	0f 90       	pop	r0
     dfe:	1f 90       	pop	r1
     e00:	18 95       	reti

00000e02 <_Z22update_lcd_clock_printv>:

void update_lcd_clock_print()
{
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	27 97       	sbiw	r28, 0x07	; 7
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	de bf       	out	0x3e, r29	; 62
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	cd bf       	out	0x3d, r28	; 61
	gabi_goto(0,1);
     e16:	61 e0       	ldi	r22, 0x01	; 1
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_Z9gabi_gotohh>
	char tmp_hour[3];
	char tmp_minutes[4];
	itoa(p_hour,tmp_hour,10);
     e1e:	4a e0       	ldi	r20, 0x0A	; 10
     e20:	50 e0       	ldi	r21, 0x00	; 0
     e22:	be 01       	movw	r22, r28
     e24:	6b 5f       	subi	r22, 0xFB	; 251
     e26:	7f 4f       	sbci	r23, 0xFF	; 255
     e28:	80 91 aa 01 	lds	r24, 0x01AA
     e2c:	90 91 ab 01 	lds	r25, 0x01AB
     e30:	0e 94 aa 0c 	call	0x1954	; 0x1954 <itoa>
	itoa(p_min,tmp_minutes,10);
     e34:	4a e0       	ldi	r20, 0x0A	; 10
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	be 01       	movw	r22, r28
     e3a:	6f 5f       	subi	r22, 0xFF	; 255
     e3c:	7f 4f       	sbci	r23, 0xFF	; 255
     e3e:	80 91 ac 01 	lds	r24, 0x01AC
     e42:	90 91 ad 01 	lds	r25, 0x01AD
     e46:	0e 94 aa 0c 	call	0x1954	; 0x1954 <itoa>
	gabi_string(tmp_hour); 
     e4a:	ce 01       	movw	r24, r28
     e4c:	05 96       	adiw	r24, 0x05	; 5
     e4e:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
	gabi_data(':');
     e52:	8a e3       	ldi	r24, 0x3A	; 58
     e54:	0e 94 c2 05 	call	0xb84	; 0xb84 <_Z9gabi_datah>
	if (p_min < 10) gabi_data('0');
     e58:	80 91 ac 01 	lds	r24, 0x01AC
     e5c:	90 91 ad 01 	lds	r25, 0x01AD
     e60:	0a 97       	sbiw	r24, 0x0a	; 10
     e62:	1c f4       	brge	.+6      	; 0xe6a <_Z22update_lcd_clock_printv+0x68>
     e64:	80 e3       	ldi	r24, 0x30	; 48
     e66:	0e 94 c2 05 	call	0xb84	; 0xb84 <_Z9gabi_datah>
	gabi_string(tmp_minutes);
     e6a:	ce 01       	movw	r24, r28
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
}
     e72:	27 96       	adiw	r28, 0x07	; 7
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	08 95       	ret

00000e84 <__vector_7>:

ISR(TIMER2_COMPA_vect)          // timer compare interrupt service routine
{
     e84:	1f 92       	push	r1
     e86:	0f 92       	push	r0
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	0f 92       	push	r0
     e8c:	11 24       	eor	r1, r1
     e8e:	2f 93       	push	r18
     e90:	3f 93       	push	r19
     e92:	4f 93       	push	r20
     e94:	5f 93       	push	r21
     e96:	6f 93       	push	r22
     e98:	7f 93       	push	r23
     e9a:	8f 93       	push	r24
     e9c:	9f 93       	push	r25
     e9e:	af 93       	push	r26
     ea0:	bf 93       	push	r27
     ea2:	ef 93       	push	r30
     ea4:	ff 93       	push	r31
	p_of++;
     ea6:	80 91 a8 01 	lds	r24, 0x01A8
     eaa:	90 91 a9 01 	lds	r25, 0x01A9
     eae:	01 96       	adiw	r24, 0x01	; 1
     eb0:	90 93 a9 01 	sts	0x01A9, r25
     eb4:	80 93 a8 01 	sts	0x01A8, r24
	if (p_of > 100)
     eb8:	85 36       	cpi	r24, 0x65	; 101
     eba:	91 05       	cpc	r25, r1
     ebc:	bc f1       	brlt	.+110    	; 0xf2c <__vector_7+0xa8>
	{
		p_sec++;
     ebe:	80 91 ae 01 	lds	r24, 0x01AE
     ec2:	90 91 af 01 	lds	r25, 0x01AF
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	90 93 af 01 	sts	0x01AF, r25
     ecc:	80 93 ae 01 	sts	0x01AE, r24
		p_of=0;
     ed0:	10 92 a9 01 	sts	0x01A9, r1
     ed4:	10 92 a8 01 	sts	0x01A8, r1
		if (p_sec > 59) {
     ed8:	cc 97       	sbiw	r24, 0x3c	; 60
     eda:	44 f1       	brlt	.+80     	; 0xf2c <__vector_7+0xa8>
			p_min++;
     edc:	80 91 ac 01 	lds	r24, 0x01AC
     ee0:	90 91 ad 01 	lds	r25, 0x01AD
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	90 93 ad 01 	sts	0x01AD, r25
     eea:	80 93 ac 01 	sts	0x01AC, r24
			p_sec=0;
     eee:	10 92 af 01 	sts	0x01AF, r1
     ef2:	10 92 ae 01 	sts	0x01AE, r1
			if (p_min > 59) {
     ef6:	cc 97       	sbiw	r24, 0x3c	; 60
     ef8:	6c f0       	brlt	.+26     	; 0xf14 <__vector_7+0x90>
				p_hour++;
     efa:	80 91 aa 01 	lds	r24, 0x01AA
     efe:	90 91 ab 01 	lds	r25, 0x01AB
     f02:	01 96       	adiw	r24, 0x01	; 1
     f04:	90 93 ab 01 	sts	0x01AB, r25
     f08:	80 93 aa 01 	sts	0x01AA, r24
				p_min=0;
     f0c:	10 92 ad 01 	sts	0x01AD, r1
     f10:	10 92 ac 01 	sts	0x01AC, r1
			}
			update_lcd_clock_print();
     f14:	0e 94 01 07 	call	0xe02	; 0xe02 <_Z22update_lcd_clock_printv>
			if (p_hour >= 2) 
     f18:	80 91 aa 01 	lds	r24, 0x01AA
     f1c:	90 91 ab 01 	lds	r25, 0x01AB
     f20:	02 97       	sbiw	r24, 0x02	; 2
     f22:	24 f0       	brlt	.+8      	; 0xf2c <__vector_7+0xa8>
			{
				relays_power_off();
     f24:	0e 94 39 06 	call	0xc72	; 0xc72 <_Z16relays_power_offv>
				stop_timer2();	
     f28:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_Z11stop_timer2v>
			}
		}
	}
}
     f2c:	ff 91       	pop	r31
     f2e:	ef 91       	pop	r30
     f30:	bf 91       	pop	r27
     f32:	af 91       	pop	r26
     f34:	9f 91       	pop	r25
     f36:	8f 91       	pop	r24
     f38:	7f 91       	pop	r23
     f3a:	6f 91       	pop	r22
     f3c:	5f 91       	pop	r21
     f3e:	4f 91       	pop	r20
     f40:	3f 91       	pop	r19
     f42:	2f 91       	pop	r18
     f44:	0f 90       	pop	r0
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	0f 90       	pop	r0
     f4a:	1f 90       	pop	r1
     f4c:	18 95       	reti

00000f4e <_Z8init_ADCv>:

int tempC;

void init_ADC()
{
	DDRC &=~(1<<LM35_PIN);
     f4e:	38 98       	cbi	0x07, 0	; 7
	DDRC &=~(1<<PRI_PIN);
     f50:	39 98       	cbi	0x07, 1	; 7
	ADMUX |= (1<<REFS0);
     f52:	ec e7       	ldi	r30, 0x7C	; 124
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	80 64       	ori	r24, 0x40	; 64
     f5a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2)  | (1<<ADEN);
     f5c:	ea e7       	ldi	r30, 0x7A	; 122
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	84 68       	ori	r24, 0x84	; 132
     f64:	80 83       	st	Z, r24
	tempC=0;
     f66:	10 92 a7 01 	sts	0x01A7, r1
     f6a:	10 92 a6 01 	sts	0x01A6, r1
     f6e:	08 95       	ret

00000f70 <_Z7ReadADCh>:
}

uint16_t ReadADC(uint8_t ADCchannel)
{
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
     f70:	ec e7       	ldi	r30, 0x7C	; 124
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	90 81       	ld	r25, Z
     f76:	8f 70       	andi	r24, 0x0F	; 15
     f78:	90 7f       	andi	r25, 0xF0	; 240
     f7a:	98 2b       	or	r25, r24
     f7c:	90 83       	st	Z, r25
	//single conversion mode
	ADCSRA |= (1<<ADSC);
     f7e:	ea e7       	ldi	r30, 0x7A	; 122
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	80 64       	ori	r24, 0x40	; 64
     f86:	80 83       	st	Z, r24
	// wait until ADC conversion is complete (ADSC will come 0 again)
	while( ADCSRA & (1<<ADSC) );
     f88:	80 81       	ld	r24, Z
     f8a:	86 fd       	sbrc	r24, 6
     f8c:	fd cf       	rjmp	.-6      	; 0xf88 <_Z7ReadADCh+0x18>
	return ADC;
     f8e:	20 91 78 00 	lds	r18, 0x0078
     f92:	30 91 79 00 	lds	r19, 0x0079
}
     f96:	82 2f       	mov	r24, r18
     f98:	93 2f       	mov	r25, r19
     f9a:	08 95       	ret

00000f9c <_Z21update_lcd_lm35_printv>:

void update_lcd_lm35_print()
{
     f9c:	ef 92       	push	r14
     f9e:	ff 92       	push	r15
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <_Z21update_lcd_lm35_printv+0xe>
     faa:	00 d0       	rcall	.+0      	; 0xfac <_Z21update_lcd_lm35_printv+0x10>
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	05 e0       	ldi	r16, 0x05	; 5
     fb2:	10 e0       	ldi	r17, 0x00	; 0
	int average_c = 5;
	uint16_t cur_read=0;
     fb4:	e1 2c       	mov	r14, r1
     fb6:	f1 2c       	mov	r15, r1
	for (int i=0; i<average_c; i++) 
	{
		cur_read += ReadADC(0);
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	0e 94 b8 07 	call	0xf70	; 0xf70 <_Z7ReadADCh>
     fbe:	e8 0e       	add	r14, r24
     fc0:	f9 1e       	adc	r15, r25
     fc2:	01 50       	subi	r16, 0x01	; 1
     fc4:	11 09       	sbc	r17, r1

void update_lcd_lm35_print()
{
	int average_c = 5;
	uint16_t cur_read=0;
	for (int i=0; i<average_c; i++) 
     fc6:	c1 f7       	brne	.-16     	; 0xfb8 <_Z21update_lcd_lm35_printv+0x1c>
	{
		cur_read += ReadADC(0);
	}
	tempC = ((cur_read/average_c*500)/1024);
     fc8:	97 01       	movw	r18, r14
     fca:	ad ec       	ldi	r26, 0xCD	; 205
     fcc:	bc ec       	ldi	r27, 0xCC	; 204
     fce:	0e 94 80 0c 	call	0x1900	; 0x1900 <__umulhisi3>
     fd2:	96 95       	lsr	r25
     fd4:	87 95       	ror	r24
     fd6:	96 95       	lsr	r25
     fd8:	87 95       	ror	r24
     fda:	44 ef       	ldi	r20, 0xF4	; 244
     fdc:	51 e0       	ldi	r21, 0x01	; 1
     fde:	84 9f       	mul	r24, r20
     fe0:	90 01       	movw	r18, r0
     fe2:	85 9f       	mul	r24, r21
     fe4:	30 0d       	add	r19, r0
     fe6:	94 9f       	mul	r25, r20
     fe8:	30 0d       	add	r19, r0
     fea:	11 24       	eor	r1, r1
     fec:	83 2f       	mov	r24, r19
     fee:	86 95       	lsr	r24
     ff0:	86 95       	lsr	r24
     ff2:	80 93 a6 01 	sts	0x01A6, r24
     ff6:	10 92 a7 01 	sts	0x01A7, r1
	char cur_str [4];
 	itoa(tempC,cur_str,10);
     ffa:	4a e0       	ldi	r20, 0x0A	; 10
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	be 01       	movw	r22, r28
    1000:	6f 5f       	subi	r22, 0xFF	; 255
    1002:	7f 4f       	sbci	r23, 0xFF	; 255
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 aa 0c 	call	0x1954	; 0x1954 <itoa>
 	gabi_goto(12,1);
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	8c e0       	ldi	r24, 0x0C	; 12
    100e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_Z9gabi_gotohh>
 	gabi_string(cur_str);
    1012:	ce 01       	movw	r24, r28
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
 	gabi_data(0b11011111);
    101a:	8f ed       	ldi	r24, 0xDF	; 223
    101c:	0e 94 c2 05 	call	0xb84	; 0xb84 <_Z9gabi_datah>
 	gabi_data('C');
    1020:	83 e4       	ldi	r24, 0x43	; 67
    1022:	0e 94 c2 05 	call	0xb84	; 0xb84 <_Z9gabi_datah>
}
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	08 95       	ret

0000103c <_Z9reset_seqv>:
// 	else gabi_data('|');
// 	toggle^=1;
// }

void reset_seq(){
	seq=1;
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	90 93 95 01 	sts	0x0195, r25
    1044:	80 93 94 01 	sts	0x0194, r24
    1048:	08 95       	ret

0000104a <_Z15print_full_chari>:
}

void print_full_char(int n)
{
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	8c 01       	movw	r16, r24
	for (int i=0; i<n; i++) gabi_data(0xFF);
    1054:	18 16       	cp	r1, r24
    1056:	19 06       	cpc	r1, r25
    1058:	4c f4       	brge	.+18     	; 0x106c <_Z15print_full_chari+0x22>
    105a:	c0 e0       	ldi	r28, 0x00	; 0
    105c:	d0 e0       	ldi	r29, 0x00	; 0
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	0e 94 c2 05 	call	0xb84	; 0xb84 <_Z9gabi_datah>
    1064:	21 96       	adiw	r28, 0x01	; 1
    1066:	c0 17       	cp	r28, r16
    1068:	d1 07       	cpc	r29, r17
    106a:	c9 f7       	brne	.-14     	; 0x105e <_Z15print_full_chari+0x14>
}
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	08 95       	ret

00001076 <_Z20check_button_pressedv>:
//	toggle=0;
}

int check_button_pressed()
{
	if (BUTTON_IN & (1<<BUTTON_PIN))
    1076:	35 9b       	sbis	0x06, 5	; 6
    1078:	0e c0       	rjmp	.+28     	; 0x1096 <_Z20check_button_pressedv+0x20>
	{
		pressed_counter=0;
    107a:	10 92 93 01 	sts	0x0193, r1
    107e:	10 92 92 01 	sts	0x0192, r1
		release_counter++;
    1082:	80 91 90 01 	lds	r24, 0x0190
    1086:	90 91 91 01 	lds	r25, 0x0191
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	90 93 91 01 	sts	0x0191, r25
    1090:	80 93 90 01 	sts	0x0190, r24
    1094:	0d c0       	rjmp	.+26     	; 0x10b0 <_Z20check_button_pressedv+0x3a>
	} else {
//		toggle_dot();
		release_counter=0;
    1096:	10 92 91 01 	sts	0x0191, r1
    109a:	10 92 90 01 	sts	0x0190, r1
		pressed_counter++;
    109e:	80 91 92 01 	lds	r24, 0x0192
    10a2:	90 91 93 01 	lds	r25, 0x0193
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	90 93 93 01 	sts	0x0193, r25
    10ac:	80 93 92 01 	sts	0x0192, r24
	}
	if (pressed_counter >= DEBOUNCE_TIME) return 1;
    10b0:	21 e0       	ldi	r18, 0x01	; 1
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	80 91 92 01 	lds	r24, 0x0192
    10b8:	90 91 93 01 	lds	r25, 0x0193
    10bc:	8c 32       	cpi	r24, 0x2C	; 44
    10be:	91 40       	sbci	r25, 0x01	; 1
    10c0:	14 f4       	brge	.+4      	; 0x10c6 <_Z20check_button_pressedv+0x50>
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
	return 0;
}
    10c6:	82 2f       	mov	r24, r18
    10c8:	93 2f       	mov	r25, r19
    10ca:	08 95       	ret

000010cc <_Z16print_read_writeim>:
int main() { setup(); while(1) loop(); return 0; }
	
// LCD functions

void print_read_write(int read_write, unsigned long pkg)
{
    10cc:	cf 92       	push	r12
    10ce:	df 92       	push	r13
    10d0:	ef 92       	push	r14
    10d2:	ff 92       	push	r15
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	2a 97       	sbiw	r28, 0x0a	; 10
    10de:	0f b6       	in	r0, 0x3f	; 63
    10e0:	f8 94       	cli
    10e2:	de bf       	out	0x3e, r29	; 62
    10e4:	0f be       	out	0x3f, r0	; 63
    10e6:	cd bf       	out	0x3d, r28	; 61
    10e8:	6a 01       	movw	r12, r20
    10ea:	7b 01       	movw	r14, r22
	char seq_str[10];
	if (read_write == R)
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	29 f4       	brne	.+10     	; 0x10fa <_Z16print_read_writeim+0x2e>
	{
  		gabi_goto(4,0);
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	84 e0       	ldi	r24, 0x04	; 4
    10f4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_Z9gabi_gotohh>
    10f8:	06 c0       	rjmp	.+12     	; 0x1106 <_Z16print_read_writeim+0x3a>
	}
	else if (read_write == W)
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	21 f4       	brne	.+8      	; 0x1106 <_Z16print_read_writeim+0x3a>
	{
		gabi_goto(4,1);
    10fe:	61 e0       	ldi	r22, 0x01	; 1
    1100:	84 e0       	ldi	r24, 0x04	; 4
    1102:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_Z9gabi_gotohh>
	}
	ultoa(pkg,seq_str,16);
    1106:	20 e1       	ldi	r18, 0x10	; 16
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	ae 01       	movw	r20, r28
    110c:	4f 5f       	subi	r20, 0xFF	; 255
    110e:	5f 4f       	sbci	r21, 0xFF	; 255
    1110:	c7 01       	movw	r24, r14
    1112:	b6 01       	movw	r22, r12
    1114:	0e 94 cb 0c 	call	0x1996	; 0x1996 <ultoa>
	gabi_string(seq_str);
    1118:	ce 01       	movw	r24, r28
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
}
    1120:	2a 96       	adiw	r28, 0x0a	; 10
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	ff 90       	pop	r15
    1132:	ef 90       	pop	r14
    1134:	df 90       	pop	r13
    1136:	cf 90       	pop	r12
    1138:	08 95       	ret

0000113a <_Z10write_datam>:
	}
	if (pressed_counter >= DEBOUNCE_TIME) return 1;
	return 0;
}

int write_data(unsigned long pkg) {
    113a:	cf 92       	push	r12
    113c:	df 92       	push	r13
    113e:	ef 92       	push	r14
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	00 d0       	rcall	.+0      	; 0x114c <_Z10write_datam+0x12>
    114c:	00 d0       	rcall	.+0      	; 0x114e <_Z10write_datam+0x14>
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	69 83       	std	Y+1, r22	; 0x01
    1154:	7a 83       	std	Y+2, r23	; 0x02
    1156:	8b 83       	std	Y+3, r24	; 0x03
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	89 ef       	ldi	r24, 0xF9	; 249
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	f1 f7       	brne	.-4      	; 0x115e <_Z10write_datam+0x24>
    1162:	00 c0       	rjmp	.+0      	; 0x1164 <_Z10write_datam+0x2a>
    1164:	00 00       	nop
	_delay_ms(1);
	int  retry;
	long ret_val;
	ret_val = 0;
	retry = 0;
	radio.stopListening();
    1166:	86 e9       	ldi	r24, 0x96	; 150
    1168:	91 e0       	ldi	r25, 0x01	; 1
    116a:	0e 94 a7 02 	call	0x54e	; 0x54e <_ZN4RF2413stopListeningEv>
    116e:	06 e0       	ldi	r16, 0x06	; 6
    1170:	10 e0       	ldi	r17, 0x00	; 0
    1172:	01 50       	subi	r16, 0x01	; 1
    1174:	11 09       	sbc	r17, r1
	while ((!ret_val) && (retry < 5))
    1176:	91 f4       	brne	.+36     	; 0x119c <_Z10write_datam+0x62>
    1178:	c1 2c       	mov	r12, r1
    117a:	d1 2c       	mov	r13, r1
    117c:	76 01       	movw	r14, r12
	{
		ret_val = radio.write( &pkg, sizeof(unsigned long) );
		retry++;
		_delay_ms(20);
	}
	radio.startListening();
    117e:	86 e9       	ldi	r24, 0x96	; 150
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	0e 94 70 02 	call	0x4e0	; 0x4e0 <_ZN4RF2414startListeningEv>

	print_read_write(W,pkg);
    1186:	49 81       	ldd	r20, Y+1	; 0x01
    1188:	5a 81       	ldd	r21, Y+2	; 0x02
    118a:	6b 81       	ldd	r22, Y+3	; 0x03
    118c:	7c 81       	ldd	r23, Y+4	; 0x04
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 66 08 	call	0x10cc	; 0x10cc <_Z16print_read_writeim>

	return ret_val;
    1196:	8c 2d       	mov	r24, r12
    1198:	9d 2d       	mov	r25, r13
    119a:	18 c0       	rjmp	.+48     	; 0x11cc <_Z10write_datam+0x92>
	ret_val = 0;
	retry = 0;
	radio.stopListening();
	while ((!ret_val) && (retry < 5))
	{
		ret_val = radio.write( &pkg, sizeof(unsigned long) );
    119c:	44 e0       	ldi	r20, 0x04	; 4
    119e:	be 01       	movw	r22, r28
    11a0:	6f 5f       	subi	r22, 0xFF	; 255
    11a2:	7f 4f       	sbci	r23, 0xFF	; 255
    11a4:	86 e9       	ldi	r24, 0x96	; 150
    11a6:	91 e0       	ldi	r25, 0x01	; 1
    11a8:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_ZN4RF245writeEPKvh>
    11ac:	c8 2e       	mov	r12, r24
    11ae:	d1 2c       	mov	r13, r1
    11b0:	e1 2c       	mov	r14, r1
    11b2:	f1 2c       	mov	r15, r1
    11b4:	87 e8       	ldi	r24, 0x87	; 135
    11b6:	93 e1       	ldi	r25, 0x13	; 19
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <_Z10write_datam+0x7e>
    11bc:	00 c0       	rjmp	.+0      	; 0x11be <_Z10write_datam+0x84>
    11be:	00 00       	nop
	int  retry;
	long ret_val;
	ret_val = 0;
	retry = 0;
	radio.stopListening();
	while ((!ret_val) && (retry < 5))
    11c0:	c1 14       	cp	r12, r1
    11c2:	d1 04       	cpc	r13, r1
    11c4:	e1 04       	cpc	r14, r1
    11c6:	f1 04       	cpc	r15, r1
    11c8:	d1 f6       	brne	.-76     	; 0x117e <_Z10write_datam+0x44>
    11ca:	d3 cf       	rjmp	.-90     	; 0x1172 <_Z10write_datam+0x38>
	radio.startListening();

	print_read_write(W,pkg);

	return ret_val;
}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	ff 90       	pop	r15
    11de:	ef 90       	pop	r14
    11e0:	df 90       	pop	r13
    11e2:	cf 90       	pop	r12
    11e4:	08 95       	ret

000011e6 <_Z4loopv>:

void loop(void)
{
    11e6:	8f 92       	push	r8
    11e8:	9f 92       	push	r9
    11ea:	af 92       	push	r10
    11ec:	bf 92       	push	r11
    11ee:	cf 92       	push	r12
    11f0:	df 92       	push	r13
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <_Z4loopv+0x1a>
    1200:	00 d0       	rcall	.+0      	; 0x1202 <_Z4loopv+0x1c>
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
	// Button handle
	if (check_button_pressed())
    1206:	0e 94 3b 08 	call	0x1076	; 0x1076 <_Z20check_button_pressedv>
    120a:	89 2b       	or	r24, r25
    120c:	e1 f0       	breq	.+56     	; 0x1246 <_Z4loopv+0x60>
	{
		if (button_last == 0)
    120e:	80 91 8e 01 	lds	r24, 0x018E
    1212:	90 91 8f 01 	lds	r25, 0x018F
    1216:	89 2b       	or	r24, r25
    1218:	d1 f4       	brne	.+52     	; 0x124e <_Z4loopv+0x68>
		{
			if (get_relay1_emr_state())
    121a:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z20get_relay1_emr_statev>
    121e:	88 23       	and	r24, r24
    1220:	29 f0       	breq	.+10     	; 0x122c <_Z4loopv+0x46>
			{
				relays_power_off();
    1222:	0e 94 39 06 	call	0xc72	; 0xc72 <_Z16relays_power_offv>
				stop_timer2();
    1226:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_Z11stop_timer2v>
    122a:	06 c0       	rjmp	.+12     	; 0x1238 <_Z4loopv+0x52>
			} else {
				start_timer2();
    122c:	0e 94 a9 06 	call	0xd52	; 0xd52 <_Z12start_timer2v>
				relays_power_on();
    1230:	0e 94 52 06 	call	0xca4	; 0xca4 <_Z15relays_power_onv>
				update_lcd_clock_print();
    1234:	0e 94 01 07 	call	0xe02	; 0xe02 <_Z22update_lcd_clock_printv>
			}
			button_last=1;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	90 93 8f 01 	sts	0x018F, r25
    1240:	80 93 8e 01 	sts	0x018E, r24
    1244:	04 c0       	rjmp	.+8      	; 0x124e <_Z4loopv+0x68>
		}
	} else {
		button_last=0;
    1246:	10 92 8f 01 	sts	0x018F, r1
    124a:	10 92 8e 01 	sts	0x018E, r1
	}
	
	// Handle LM35
	if (timer1_fire)
    124e:	80 91 b0 01 	lds	r24, 0x01B0
    1252:	90 91 b1 01 	lds	r25, 0x01B1
    1256:	89 2b       	or	r24, r25
    1258:	31 f0       	breq	.+12     	; 0x1266 <_Z4loopv+0x80>
	{
		update_lcd_lm35_print();
    125a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <_Z21update_lcd_lm35_printv>
		timer1_fire=0;
    125e:	10 92 b1 01 	sts	0x01B1, r1
    1262:	10 92 b0 01 	sts	0x01B0, r1
//		toggle_dot();
	}
		
	// if there is data ready
	if ( radio.available() )
    1266:	86 e9       	ldi	r24, 0x96	; 150
    1268:	91 e0       	ldi	r25, 0x01	; 1
    126a:	0e 94 40 03 	call	0x680	; 0x680 <_ZN4RF249availableEv>
    126e:	88 23       	and	r24, r24
    1270:	09 f4       	brne	.+2      	; 0x1274 <_Z4loopv+0x8e>
    1272:	19 c1       	rjmp	.+562    	; 0x14a6 <_Z4loopv+0x2c0>
		// Dump the payloads until we've gotten everything
		bool done = false;
		while (!done)
		{
			// Fetch the payload, and see if this was the last one.
			done = radio.read( &got_pkg, sizeof(unsigned long) );
    1274:	44 e0       	ldi	r20, 0x04	; 4
    1276:	be 01       	movw	r22, r28
    1278:	6f 5f       	subi	r22, 0xFF	; 255
    127a:	7f 4f       	sbci	r23, 0xFF	; 255
    127c:	86 e9       	ldi	r24, 0x96	; 150
    127e:	91 e0       	ldi	r25, 0x01	; 1
    1280:	0e 94 45 03 	call	0x68a	; 0x68a <_ZN4RF244readEPvh>
    1284:	e7 e8       	ldi	r30, 0x87	; 135
    1286:	f3 e1       	ldi	r31, 0x13	; 19
    1288:	31 97       	sbiw	r30, 0x01	; 1
    128a:	f1 f7       	brne	.-4      	; 0x1288 <_Z4loopv+0xa2>
    128c:	00 c0       	rjmp	.+0      	; 0x128e <_Z4loopv+0xa8>
    128e:	00 00       	nop
	if ( radio.available() )
	{
		unsigned long got_pkg;
		// Dump the payloads until we've gotten everything
		bool done = false;
		while (!done)
    1290:	88 23       	and	r24, r24
    1292:	81 f3       	breq	.-32     	; 0x1274 <_Z4loopv+0x8e>

			// Delay just a little bit to let the other unit
			// make the transition to receiver
			_delay_ms(20);
		}
		uint8_t cur_seq = ((got_pkg >> SEQ_BIT)&SEQ_MASK);
    1294:	c9 80       	ldd	r12, Y+1	; 0x01
    1296:	da 80       	ldd	r13, Y+2	; 0x02
    1298:	eb 80       	ldd	r14, Y+3	; 0x03
    129a:	fc 80       	ldd	r15, Y+4	; 0x04
    129c:	46 01       	movw	r8, r12
    129e:	57 01       	movw	r10, r14
    12a0:	07 2e       	mov	r0, r23
    12a2:	7c e1       	ldi	r23, 0x1C	; 28
    12a4:	b6 94       	lsr	r11
    12a6:	a7 94       	ror	r10
    12a8:	97 94       	ror	r9
    12aa:	87 94       	ror	r8
    12ac:	7a 95       	dec	r23
    12ae:	d1 f7       	brne	.-12     	; 0x12a4 <_Z4loopv+0xbe>
    12b0:	70 2d       	mov	r23, r0
    12b2:	18 2d       	mov	r17, r8
		uint8_t cur_data = ((got_pkg >> CMD_BIT) & CMD_MASK);
		uint8_t cur_rw = ((got_pkg >> RW_BIT) & RW_MASK);
		uint8_t cur_id = ((got_pkg >> ID_BIT) & ID_MASK);
		
		//write_data(got_pkg);
		if (got_pkg != 0xFFFFFFFF) print_read_write(R,got_pkg);
    12b4:	ff ef       	ldi	r31, 0xFF	; 255
    12b6:	cf 16       	cp	r12, r31
    12b8:	df 06       	cpc	r13, r31
    12ba:	ef 06       	cpc	r14, r31
    12bc:	ff 06       	cpc	r15, r31
    12be:	31 f0       	breq	.+12     	; 0x12cc <_Z4loopv+0xe6>
    12c0:	b7 01       	movw	r22, r14
    12c2:	a6 01       	movw	r20, r12
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 66 08 	call	0x10cc	; 0x10cc <_Z16print_read_writeim>
// 		
// 		char id_str[8];
// 		itoa(cur_id,id_str,16);
// 		gabi_string(id_str);

		if (cur_seq == seq) {
    12cc:	21 2f       	mov	r18, r17
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	80 91 94 01 	lds	r24, 0x0194
    12d4:	90 91 95 01 	lds	r25, 0x0195
    12d8:	28 17       	cp	r18, r24
    12da:	39 07       	cpc	r19, r25
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <_Z4loopv+0xfa>
    12de:	e1 c0       	rjmp	.+450    	; 0x14a2 <_Z4loopv+0x2bc>
			switch (seq) {
    12e0:	11 30       	cpi	r17, 0x01	; 1
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <_Z4loopv+0x100>
    12e4:	e0 c0       	rjmp	.+448    	; 0x14a6 <_Z4loopv+0x2c0>
			_delay_ms(20);
		}
		uint8_t cur_seq = ((got_pkg >> SEQ_BIT)&SEQ_MASK);
		uint8_t cur_data = ((got_pkg >> CMD_BIT) & CMD_MASK);
		uint8_t cur_rw = ((got_pkg >> RW_BIT) & RW_MASK);
		uint8_t cur_id = ((got_pkg >> ID_BIT) & ID_MASK);
    12e6:	8f 2d       	mov	r24, r15
    12e8:	99 27       	eor	r25, r25
    12ea:	aa 27       	eor	r26, r26
    12ec:	bb 27       	eor	r27, r27
    12ee:	8f 70       	andi	r24, 0x0F	; 15
    12f0:	99 27       	eor	r25, r25
    12f2:	aa 27       	eor	r26, r26
    12f4:	bb 27       	eor	r27, r27
// 		gabi_string(id_str);

		if (cur_seq == seq) {
			switch (seq) {
				case 1:
					if (cur_id == MY_ID)
    12f6:	8c 30       	cpi	r24, 0x0C	; 12
    12f8:	09 f0       	breq	.+2      	; 0x12fc <_Z4loopv+0x116>
    12fa:	d5 c0       	rjmp	.+426    	; 0x14a6 <_Z4loopv+0x2c0>
			// Delay just a little bit to let the other unit
			// make the transition to receiver
			_delay_ms(20);
		}
		uint8_t cur_seq = ((got_pkg >> SEQ_BIT)&SEQ_MASK);
		uint8_t cur_data = ((got_pkg >> CMD_BIT) & CMD_MASK);
    12fc:	8c 2d       	mov	r24, r12
    12fe:	8f 70       	andi	r24, 0x0F	; 15
		uint8_t cur_rw = ((got_pkg >> RW_BIT) & RW_MASK);
    1300:	0b 2e       	mov	r0, r27
    1302:	b7 e1       	ldi	r27, 0x17	; 23
    1304:	f6 94       	lsr	r15
    1306:	e7 94       	ror	r14
    1308:	d7 94       	ror	r13
    130a:	c7 94       	ror	r12
    130c:	ba 95       	dec	r27
    130e:	d1 f7       	brne	.-12     	; 0x1304 <_Z4loopv+0x11e>
    1310:	b0 2d       	mov	r27, r0
			switch (seq) {
				case 1:
					if (cur_id == MY_ID)
					{
						// Write to me
						if (cur_rw & W)
    1312:	c0 fe       	sbrs	r12, 0
    1314:	22 c0       	rjmp	.+68     	; 0x135a <_Z4loopv+0x174>
						{
							switch (cur_data) {
    1316:	88 23       	and	r24, r24
    1318:	21 f0       	breq	.+8      	; 0x1322 <_Z4loopv+0x13c>
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	09 f0       	breq	.+2      	; 0x1320 <_Z4loopv+0x13a>
    131e:	c3 c0       	rjmp	.+390    	; 0x14a6 <_Z4loopv+0x2c0>
    1320:	0d c0       	rjmp	.+26     	; 0x133c <_Z4loopv+0x156>
								case OFF:
									write_data(got_pkg);
    1322:	69 81       	ldd	r22, Y+1	; 0x01
    1324:	7a 81       	ldd	r23, Y+2	; 0x02
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	0e 94 9d 08 	call	0x113a	; 0x113a <_Z10write_datam>
									stop_timer2();
    132e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <_Z11stop_timer2v>
									reset_seq();
    1332:	0e 94 1e 08 	call	0x103c	; 0x103c <_Z9reset_seqv>
									relays_power_off();
    1336:	0e 94 39 06 	call	0xc72	; 0xc72 <_Z16relays_power_offv>
									break;
    133a:	b5 c0       	rjmp	.+362    	; 0x14a6 <_Z4loopv+0x2c0>
								case ON:
									write_data(got_pkg);
    133c:	69 81       	ldd	r22, Y+1	; 0x01
    133e:	7a 81       	ldd	r23, Y+2	; 0x02
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	9c 81       	ldd	r25, Y+4	; 0x04
    1344:	0e 94 9d 08 	call	0x113a	; 0x113a <_Z10write_datam>
									reset_seq();
    1348:	0e 94 1e 08 	call	0x103c	; 0x103c <_Z9reset_seqv>
									start_timer2();
    134c:	0e 94 a9 06 	call	0xd52	; 0xd52 <_Z12start_timer2v>
									relays_power_on();
    1350:	0e 94 52 06 	call	0xca4	; 0xca4 <_Z15relays_power_onv>
									update_lcd_clock_print();
    1354:	0e 94 01 07 	call	0xe02	; 0xe02 <_Z22update_lcd_clock_printv>
									break;
    1358:	a6 c0       	rjmp	.+332    	; 0x14a6 <_Z4loopv+0x2c0>
						// Read from me
						else
						{
							uint8_t read_val;
							uint32_t tmp_payload;
							switch (cur_data) {
    135a:	86 30       	cpi	r24, 0x06	; 6
    135c:	51 f1       	breq	.+84     	; 0x13b2 <_Z4loopv+0x1cc>
    135e:	18 f4       	brcc	.+6      	; 0x1366 <_Z4loopv+0x180>
    1360:	88 23       	and	r24, r24
    1362:	41 f0       	breq	.+16     	; 0x1374 <_Z4loopv+0x18e>
    1364:	a0 c0       	rjmp	.+320    	; 0x14a6 <_Z4loopv+0x2c0>
    1366:	88 30       	cpi	r24, 0x08	; 8
    1368:	09 f4       	brne	.+2      	; 0x136c <_Z4loopv+0x186>
    136a:	7b c0       	rjmp	.+246    	; 0x1462 <_Z4loopv+0x27c>
    136c:	8f 30       	cpi	r24, 0x0F	; 15
    136e:	09 f0       	breq	.+2      	; 0x1372 <_Z4loopv+0x18c>
    1370:	9a c0       	rjmp	.+308    	; 0x14a6 <_Z4loopv+0x2c0>
    1372:	65 c0       	rjmp	.+202    	; 0x143e <_Z4loopv+0x258>
								case PWR_STT:
									read_val = get_relay1_emr_state();
    1374:	0e 94 19 06 	call	0xc32	; 0xc32 <_Z20get_relay1_emr_statev>
									tmp_payload = (((uint32_t)(seq & SEQ_MASK) << SEQ_BIT) | ((uint32_t)(MY_ID & ID_MASK) << ID_BIT) | ((uint32_t)(R & RW_MASK) << RW_BIT) | ((uint32_t)(read_val & STAT_MASK) << STAT_BIT));
    1378:	40 91 94 01 	lds	r20, 0x0194
    137c:	50 91 95 01 	lds	r21, 0x0195
    1380:	66 27       	eor	r22, r22
    1382:	57 fd       	sbrc	r21, 7
    1384:	60 95       	com	r22
    1386:	76 2f       	mov	r23, r22
    1388:	03 2e       	mov	r0, r19
    138a:	3c e1       	ldi	r19, 0x1C	; 28
    138c:	44 0f       	add	r20, r20
    138e:	55 1f       	adc	r21, r21
    1390:	66 1f       	adc	r22, r22
    1392:	77 1f       	adc	r23, r23
    1394:	3a 95       	dec	r19
    1396:	d1 f7       	brne	.-12     	; 0x138c <_Z4loopv+0x1a6>
    1398:	30 2d       	mov	r19, r0
    139a:	7c 60       	ori	r23, 0x0C	; 12
    139c:	81 70       	andi	r24, 0x01	; 1
    139e:	8a 01       	movw	r16, r20
    13a0:	9b 01       	movw	r18, r22
    13a2:	08 2b       	or	r16, r24
    13a4:	c9 01       	movw	r24, r18
    13a6:	b8 01       	movw	r22, r16
									write_data(tmp_payload);
    13a8:	0e 94 9d 08 	call	0x113a	; 0x113a <_Z10write_datam>
									reset_seq();
    13ac:	0e 94 1e 08 	call	0x103c	; 0x103c <_Z9reset_seqv>
									break;
    13b0:	7a c0       	rjmp	.+244    	; 0x14a6 <_Z4loopv+0x2c0>
								case P_TIME:
									//read_val=p_hour;
									tmp_payload = (((uint32_t)(seq & SEQ_MASK) << SEQ_BIT) | ((uint32_t)(MY_ID & ID_MASK) << ID_BIT) | ((uint32_t)(R & RW_MASK) << RW_BIT) | ((uint32_t)(p_hour & HOUR_MASK) << HOUR_BIT) | ((uint32_t)(p_min & MINS_MASK) << MINS_BIT));
    13b2:	60 91 ac 01 	lds	r22, 0x01AC
    13b6:	70 91 ad 01 	lds	r23, 0x01AD
    13ba:	6f 73       	andi	r22, 0x3F	; 63
    13bc:	77 27       	eor	r23, r23
    13be:	cb 01       	movw	r24, r22
    13c0:	aa 27       	eor	r26, r26
    13c2:	97 fd       	sbrc	r25, 7
    13c4:	a0 95       	com	r26
    13c6:	ba 2f       	mov	r27, r26
    13c8:	bc 60       	ori	r27, 0x0C	; 12
    13ca:	07 2e       	mov	r0, r23
    13cc:	7c e1       	ldi	r23, 0x1C	; 28
    13ce:	88 0c       	add	r8, r8
    13d0:	99 1c       	adc	r9, r9
    13d2:	aa 1c       	adc	r10, r10
    13d4:	bb 1c       	adc	r11, r11
    13d6:	7a 95       	dec	r23
    13d8:	d1 f7       	brne	.-12     	; 0x13ce <_Z4loopv+0x1e8>
    13da:	70 2d       	mov	r23, r0
    13dc:	88 2a       	or	r8, r24
    13de:	99 2a       	or	r9, r25
    13e0:	aa 2a       	or	r10, r26
    13e2:	bb 2a       	or	r11, r27
    13e4:	80 91 aa 01 	lds	r24, 0x01AA
    13e8:	90 91 ab 01 	lds	r25, 0x01AB
    13ec:	87 70       	andi	r24, 0x07	; 7
    13ee:	99 27       	eor	r25, r25
    13f0:	aa 27       	eor	r26, r26
    13f2:	97 fd       	sbrc	r25, 7
    13f4:	a0 95       	com	r26
    13f6:	ba 2f       	mov	r27, r26
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	aa 1f       	adc	r26, r26
    13fe:	bb 1f       	adc	r27, r27
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	aa 1f       	adc	r26, r26
    1406:	bb 1f       	adc	r27, r27
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	aa 1f       	adc	r26, r26
    140e:	bb 1f       	adc	r27, r27
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	aa 1f       	adc	r26, r26
    1416:	bb 1f       	adc	r27, r27
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	aa 1f       	adc	r26, r26
    141e:	bb 1f       	adc	r27, r27
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	aa 1f       	adc	r26, r26
    1426:	bb 1f       	adc	r27, r27
    1428:	bc 01       	movw	r22, r24
    142a:	cd 01       	movw	r24, r26
    142c:	68 29       	or	r22, r8
    142e:	79 29       	or	r23, r9
    1430:	8a 29       	or	r24, r10
    1432:	9b 29       	or	r25, r11
									write_data(tmp_payload);
    1434:	0e 94 9d 08 	call	0x113a	; 0x113a <_Z10write_datam>
									reset_seq();
    1438:	0e 94 1e 08 	call	0x103c	; 0x103c <_Z9reset_seqv>
									break;
    143c:	34 c0       	rjmp	.+104    	; 0x14a6 <_Z4loopv+0x2c0>
// 									write_data((seq << SEQ_BIT) | (R) | (read_val));
// 									reset_seq();
// 									break;
								case R_STATUS: // status - alive
									read_val = 1;
									tmp_payload = (((uint32_t)(seq & SEQ_MASK) << SEQ_BIT) | ((uint32_t)(MY_ID & ID_MASK) << ID_BIT) | ((uint32_t)(R & RW_MASK) << RW_BIT) | ((uint32_t)(read_val & STAT_MASK) << STAT_BIT));
    143e:	07 2e       	mov	r0, r23
    1440:	7c e1       	ldi	r23, 0x1C	; 28
    1442:	88 0c       	add	r8, r8
    1444:	99 1c       	adc	r9, r9
    1446:	aa 1c       	adc	r10, r10
    1448:	bb 1c       	adc	r11, r11
    144a:	7a 95       	dec	r23
    144c:	d1 f7       	brne	.-12     	; 0x1442 <_Z4loopv+0x25c>
    144e:	70 2d       	mov	r23, r0
    1450:	c5 01       	movw	r24, r10
    1452:	b4 01       	movw	r22, r8
    1454:	61 60       	ori	r22, 0x01	; 1
    1456:	9c 60       	ori	r25, 0x0C	; 12
									write_data(tmp_payload);
    1458:	0e 94 9d 08 	call	0x113a	; 0x113a <_Z10write_datam>
									reset_seq();
    145c:	0e 94 1e 08 	call	0x103c	; 0x103c <_Z9reset_seqv>
									break;
    1460:	22 c0       	rjmp	.+68     	; 0x14a6 <_Z4loopv+0x2c0>
								case R_TEMP:  // get temperture
									tmp_payload = (((uint32_t)(seq & SEQ_MASK) << SEQ_BIT) | ((uint32_t)(MY_ID & ID_MASK) << ID_BIT) | ((uint32_t)(R & RW_MASK) << RW_BIT) | ((uint32_t)(tempC & TEMP_MASK) << TEMP_BIT));
    1462:	60 91 a6 01 	lds	r22, 0x01A6
    1466:	70 91 a7 01 	lds	r23, 0x01A7
    146a:	6f 77       	andi	r22, 0x7F	; 127
    146c:	77 27       	eor	r23, r23
    146e:	cb 01       	movw	r24, r22
    1470:	aa 27       	eor	r26, r26
    1472:	97 fd       	sbrc	r25, 7
    1474:	a0 95       	com	r26
    1476:	ba 2f       	mov	r27, r26
    1478:	bc 60       	ori	r27, 0x0C	; 12
    147a:	07 2e       	mov	r0, r23
    147c:	7c e1       	ldi	r23, 0x1C	; 28
    147e:	88 0c       	add	r8, r8
    1480:	99 1c       	adc	r9, r9
    1482:	aa 1c       	adc	r10, r10
    1484:	bb 1c       	adc	r11, r11
    1486:	7a 95       	dec	r23
    1488:	d1 f7       	brne	.-12     	; 0x147e <_Z4loopv+0x298>
    148a:	70 2d       	mov	r23, r0
    148c:	bc 01       	movw	r22, r24
    148e:	cd 01       	movw	r24, r26
    1490:	68 29       	or	r22, r8
    1492:	79 29       	or	r23, r9
    1494:	8a 29       	or	r24, r10
    1496:	9b 29       	or	r25, r11
									write_data(tmp_payload);
    1498:	0e 94 9d 08 	call	0x113a	; 0x113a <_Z10write_datam>
									reset_seq();
    149c:	0e 94 1e 08 	call	0x103c	; 0x103c <_Z9reset_seqv>
									break;
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <_Z4loopv+0x2c0>
// 				break;
// 				default:
// 				break;
 			}
 		} else {
 			reset_seq();
    14a2:	0e 94 1e 08 	call	0x103c	; 0x103c <_Z9reset_seqv>
		}
	}
}
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	1f 91       	pop	r17
    14b4:	0f 91       	pop	r16
    14b6:	ff 90       	pop	r15
    14b8:	ef 90       	pop	r14
    14ba:	df 90       	pop	r13
    14bc:	cf 90       	pop	r12
    14be:	bf 90       	pop	r11
    14c0:	af 90       	pop	r10
    14c2:	9f 90       	pop	r9
    14c4:	8f 90       	pop	r8
    14c6:	08 95       	ret

000014c8 <_Z9print_regPch>:
	ultoa(pkg,seq_str,16);
	gabi_string(seq_str);
}

void print_reg(char* name, uint8_t reg)
{
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <_Z9print_regPch+0x8>
    14d0:	1f 92       	push	r1
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	16 2f       	mov	r17, r22
	gabi_string(name);
    14d8:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
	uint8_t tmp_reg=radio.gabi_read_rf24(reg);
    14dc:	61 2f       	mov	r22, r17
    14de:	86 e9       	ldi	r24, 0x96	; 150
    14e0:	91 e0       	ldi	r25, 0x01	; 1
    14e2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN4RF2414gabi_read_rf24Eh>
	char tmp_str[3];
	utoa(tmp_reg,tmp_str,16);
    14e6:	40 e1       	ldi	r20, 0x10	; 16
    14e8:	50 e0       	ldi	r21, 0x00	; 0
    14ea:	be 01       	movw	r22, r28
    14ec:	6f 5f       	subi	r22, 0xFF	; 255
    14ee:	7f 4f       	sbci	r23, 0xFF	; 255
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <utoa>
	gabi_string(tmp_str);
    14f6:	ce 01       	movw	r24, r28
    14f8:	01 96       	adiw	r24, 0x01	; 1
    14fa:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	1f 91       	pop	r17
    150a:	08 95       	ret

0000150c <_Z12print_statusv>:

void print_status()
{
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
	uint8_t tmp_stt = radio.gabi_get_status();
    1514:	86 e9       	ldi	r24, 0x96	; 150
    1516:	91 e0       	ldi	r25, 0x01	; 1
    1518:	0e 94 4c 02 	call	0x498	; 0x498 <_ZN4RF2415gabi_get_statusEv>
    151c:	08 2f       	mov	r16, r24
	gabi_string((char*)"Status:");
    151e:	84 e1       	ldi	r24, 0x14	; 20
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
	for (int i=7; i>=0 ; i--)
    1526:	c7 e0       	ldi	r28, 0x07	; 7
    1528:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (tmp_stt & (1<<i))
    152a:	10 e0       	ldi	r17, 0x00	; 0
    152c:	98 01       	movw	r18, r16
    152e:	0c 2e       	mov	r0, r28
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <_Z12print_statusv+0x2a>
    1532:	35 95       	asr	r19
    1534:	27 95       	ror	r18
    1536:	0a 94       	dec	r0
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <_Z12print_statusv+0x26>
    153a:	20 ff       	sbrs	r18, 0
    153c:	04 c0       	rjmp	.+8      	; 0x1546 <_Z12print_statusv+0x3a>
		gabi_data('1');
    153e:	81 e3       	ldi	r24, 0x31	; 49
    1540:	0e 94 c2 05 	call	0xb84	; 0xb84 <_Z9gabi_datah>
    1544:	03 c0       	rjmp	.+6      	; 0x154c <_Z12print_statusv+0x40>
		else
		gabi_data('0');
    1546:	80 e3       	ldi	r24, 0x30	; 48
    1548:	0e 94 c2 05 	call	0xb84	; 0xb84 <_Z9gabi_datah>

void print_status()
{
	uint8_t tmp_stt = radio.gabi_get_status();
	gabi_string((char*)"Status:");
	for (int i=7; i>=0 ; i--)
    154c:	21 97       	sbiw	r28, 0x01	; 1
    154e:	70 f7       	brcc	.-36     	; 0x152c <_Z12print_statusv+0x20>
		if (tmp_stt & (1<<i))
		gabi_data('1');
		else
		gabi_data('0');
	}
}
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	08 95       	ret

0000155a <_Z13print_RX_ADDRh>:
		gabi_data('0');
	}
}

void print_RX_ADDR(uint8_t reg)
{
    155a:	ef 92       	push	r14
    155c:	ff 92       	push	r15
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	28 97       	sbiw	r28, 0x08	; 8
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
	uint8_t buffer[5];
	radio.gabi_read_rf24(reg,buffer,sizeof buffer);
    1576:	25 e0       	ldi	r18, 0x05	; 5
    1578:	ee 24       	eor	r14, r14
    157a:	e3 94       	inc	r14
    157c:	f1 2c       	mov	r15, r1
    157e:	ec 0e       	add	r14, r28
    1580:	fd 1e       	adc	r15, r29
    1582:	a7 01       	movw	r20, r14
    1584:	68 2f       	mov	r22, r24
    1586:	86 e9       	ldi	r24, 0x96	; 150
    1588:	91 e0       	ldi	r25, 0x01	; 1
    158a:	0e 94 30 05 	call	0xa60	; 0xa60 <_ZN4RF2414gabi_read_rf24EhPhh>
	gabi_string((char*)"0x");
    158e:	8c e1       	ldi	r24, 0x1C	; 28
    1590:	91 e0       	ldi	r25, 0x01	; 1
    1592:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
    1596:	8e 01       	movw	r16, r28
    1598:	0a 5f       	subi	r16, 0xFA	; 250
    159a:	1f 4f       	sbci	r17, 0xFF	; 255
	for (int i=4 ; i>=0; i--)
	{
		uint8_t tmp_uint = buffer[i];
		char tmp_uint_str[3];
		utoa(tmp_uint,tmp_uint_str,16);
    159c:	40 e1       	ldi	r20, 0x10	; 16
    159e:	50 e0       	ldi	r21, 0x00	; 0
    15a0:	be 01       	movw	r22, r28
    15a2:	6a 5f       	subi	r22, 0xFA	; 250
    15a4:	7f 4f       	sbci	r23, 0xFF	; 255
    15a6:	f8 01       	movw	r30, r16
    15a8:	82 91       	ld	r24, -Z
    15aa:	8f 01       	movw	r16, r30
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <utoa>
		gabi_string(tmp_uint_str);
    15b2:	ce 01       	movw	r24, r28
    15b4:	06 96       	adiw	r24, 0x06	; 6
    15b6:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
void print_RX_ADDR(uint8_t reg)
{
	uint8_t buffer[5];
	radio.gabi_read_rf24(reg,buffer,sizeof buffer);
	gabi_string((char*)"0x");
	for (int i=4 ; i>=0; i--)
    15ba:	0e 15       	cp	r16, r14
    15bc:	1f 05       	cpc	r17, r15
    15be:	71 f7       	brne	.-36     	; 0x159c <_Z13print_RX_ADDRh+0x42>
		uint8_t tmp_uint = buffer[i];
		char tmp_uint_str[3];
		utoa(tmp_uint,tmp_uint_str,16);
		gabi_string(tmp_uint_str);
	}
}
    15c0:	28 96       	adiw	r28, 0x08	; 8
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	08 95       	ret

000015da <_Z13print_startupv>:
{
	for (int i=0; i<n; i++) gabi_data(0xFF);
}

void print_startup()
{
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <_Z13print_startupv+0x6>
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <_Z13print_startupv+0x8>
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
	gabi_clear();
    15e6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_Z10gabi_clearv>
    15ea:	87 e8       	ldi	r24, 0x87	; 135
    15ec:	93 e1       	ldi	r25, 0x13	; 19
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	f1 f7       	brne	.-4      	; 0x15ee <_Z13print_startupv+0x14>
    15f2:	00 c0       	rjmp	.+0      	; 0x15f4 <_Z13print_startupv+0x1a>
    15f4:	00 00       	nop
	_delay_ms(20);
	print_full_char(5);
    15f6:	85 e0       	ldi	r24, 0x05	; 5
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	0e 94 25 08 	call	0x104a	; 0x104a <_Z15print_full_chari>
	gabi_string((char*)"Welcome");
    15fe:	8f e1       	ldi	r24, 0x1F	; 31
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
	print_full_char(4);
    1606:	84 e0       	ldi	r24, 0x04	; 4
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 25 08 	call	0x104a	; 0x104a <_Z15print_full_chari>
	gabi_goto(0,1);
    160e:	61 e0       	ldi	r22, 0x01	; 1
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_Z9gabi_gotohh>
	print_full_char(5);
    1616:	85 e0       	ldi	r24, 0x05	; 5
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	0e 94 25 08 	call	0x104a	; 0x104a <_Z15print_full_chari>
	gabi_string((char*)"Gabi");
    161e:	87 e2       	ldi	r24, 0x27	; 39
    1620:	91 e0       	ldi	r25, 0x01	; 1
    1622:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
	print_full_char(7);
    1626:	87 e0       	ldi	r24, 0x07	; 7
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	0e 94 25 08 	call	0x104a	; 0x104a <_Z15print_full_chari>
    162e:	9f ed       	ldi	r25, 0xDF	; 223
    1630:	23 e9       	ldi	r18, 0x93	; 147
    1632:	84 e0       	ldi	r24, 0x04	; 4
    1634:	91 50       	subi	r25, 0x01	; 1
    1636:	20 40       	sbci	r18, 0x00	; 0
    1638:	80 40       	sbci	r24, 0x00	; 0
    163a:	e1 f7       	brne	.-8      	; 0x1634 <_Z13print_startupv+0x5a>
    163c:	00 c0       	rjmp	.+0      	; 0x163e <_Z13print_startupv+0x64>
    163e:	00 00       	nop
	_delay_ms(DELAY_LCD_PRINT);
	gabi_clear();	
    1640:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_Z10gabi_clearv>
	gabi_string((char*)META_TYPE);
    1644:	8c e2       	ldi	r24, 0x2C	; 44
    1646:	91 e0       	ldi	r25, 0x01	; 1
    1648:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
	gabi_data(' ');
    164c:	80 e2       	ldi	r24, 0x20	; 32
    164e:	0e 94 c2 05 	call	0xb84	; 0xb84 <_Z9gabi_datah>
	gabi_string((char*)META_MODULE);
    1652:	83 e3       	ldi	r24, 0x33	; 51
    1654:	91 e0       	ldi	r25, 0x01	; 1
    1656:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
	gabi_string((char*)" Mod");
    165a:	89 e3       	ldi	r24, 0x39	; 57
    165c:	91 e0       	ldi	r25, 0x01	; 1
    165e:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
	gabi_goto(0,1);
    1662:	61 e0       	ldi	r22, 0x01	; 1
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_Z9gabi_gotohh>
	gabi_string((char*)"Firmware: ");
    166a:	8e e3       	ldi	r24, 0x3E	; 62
    166c:	91 e0       	ldi	r25, 0x01	; 1
    166e:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
	gabi_string((char*)META_FIRMWARE);
    1672:	89 e4       	ldi	r24, 0x49	; 73
    1674:	91 e0       	ldi	r25, 0x01	; 1
    1676:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
    167a:	9f ed       	ldi	r25, 0xDF	; 223
    167c:	23 e9       	ldi	r18, 0x93	; 147
    167e:	84 e0       	ldi	r24, 0x04	; 4
    1680:	91 50       	subi	r25, 0x01	; 1
    1682:	20 40       	sbci	r18, 0x00	; 0
    1684:	80 40       	sbci	r24, 0x00	; 0
    1686:	e1 f7       	brne	.-8      	; 0x1680 <_Z13print_startupv+0xa6>
    1688:	00 c0       	rjmp	.+0      	; 0x168a <_Z13print_startupv+0xb0>
    168a:	00 00       	nop
	_delay_ms(DELAY_LCD_PRINT);
	gabi_clear();
    168c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_Z10gabi_clearv>
	char str_id[4];
	itoa(MY_ID,str_id,10);
    1690:	4a e0       	ldi	r20, 0x0A	; 10
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	be 01       	movw	r22, r28
    1696:	6f 5f       	subi	r22, 0xFF	; 255
    1698:	7f 4f       	sbci	r23, 0xFF	; 255
    169a:	8c e0       	ldi	r24, 0x0C	; 12
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <itoa>
	gabi_string((char*)"My ID: ");
    16a2:	8d e4       	ldi	r24, 0x4D	; 77
    16a4:	91 e0       	ldi	r25, 0x01	; 1
    16a6:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
	gabi_string(str_id);
    16aa:	ce 01       	movw	r24, r28
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
    16b2:	9f ed       	ldi	r25, 0xDF	; 223
    16b4:	23 e9       	ldi	r18, 0x93	; 147
    16b6:	84 e0       	ldi	r24, 0x04	; 4
    16b8:	91 50       	subi	r25, 0x01	; 1
    16ba:	20 40       	sbci	r18, 0x00	; 0
    16bc:	80 40       	sbci	r24, 0x00	; 0
    16be:	e1 f7       	brne	.-8      	; 0x16b8 <_Z13print_startupv+0xde>
    16c0:	00 c0       	rjmp	.+0      	; 0x16c2 <_Z13print_startupv+0xe8>
    16c2:	00 00       	nop
	_delay_ms(DELAY_LCD_PRINT);
	gabi_clear();
    16c4:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_Z10gabi_clearv>
	gabi_string((char*)"RX0:");
    16c8:	85 e5       	ldi	r24, 0x55	; 85
    16ca:	91 e0       	ldi	r25, 0x01	; 1
    16cc:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
	print_RX_ADDR(RX_ADDR_P0);
    16d0:	8a e0       	ldi	r24, 0x0A	; 10
    16d2:	0e 94 ad 0a 	call	0x155a	; 0x155a <_Z13print_RX_ADDRh>
	gabi_goto(0,1);
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_Z9gabi_gotohh>
	gabi_string((char*)"RX1:");
    16de:	8a e5       	ldi	r24, 0x5A	; 90
    16e0:	91 e0       	ldi	r25, 0x01	; 1
    16e2:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
	print_RX_ADDR(RX_ADDR_P1);
    16e6:	8b e0       	ldi	r24, 0x0B	; 11
    16e8:	0e 94 ad 0a 	call	0x155a	; 0x155a <_Z13print_RX_ADDRh>
    16ec:	9f ed       	ldi	r25, 0xDF	; 223
    16ee:	23 e9       	ldi	r18, 0x93	; 147
    16f0:	84 e0       	ldi	r24, 0x04	; 4
    16f2:	91 50       	subi	r25, 0x01	; 1
    16f4:	20 40       	sbci	r18, 0x00	; 0
    16f6:	80 40       	sbci	r24, 0x00	; 0
    16f8:	e1 f7       	brne	.-8      	; 0x16f2 <_Z13print_startupv+0x118>
    16fa:	00 c0       	rjmp	.+0      	; 0x16fc <_Z13print_startupv+0x122>
    16fc:	00 00       	nop
	_delay_ms(DELAY_LCD_PRINT);
	gabi_clear();
    16fe:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_Z10gabi_clearv>
	gabi_string((char*)"TX :");
    1702:	8f e5       	ldi	r24, 0x5F	; 95
    1704:	91 e0       	ldi	r25, 0x01	; 1
    1706:	0e 94 08 06 	call	0xc10	; 0xc10 <_Z11gabi_stringPc>
	print_RX_ADDR(TX_ADDR);
    170a:	80 e1       	ldi	r24, 0x10	; 16
    170c:	0e 94 ad 0a 	call	0x155a	; 0x155a <_Z13print_RX_ADDRh>
	gabi_goto(0,1);
    1710:	61 e0       	ldi	r22, 0x01	; 1
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_Z9gabi_gotohh>
	print_reg((char*)"EN_RX:",EN_RXADDR);
    1718:	62 e0       	ldi	r22, 0x02	; 2
    171a:	84 e6       	ldi	r24, 0x64	; 100
    171c:	91 e0       	ldi	r25, 0x01	; 1
    171e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_Z9print_regPch>
    1722:	9f ed       	ldi	r25, 0xDF	; 223
    1724:	23 e9       	ldi	r18, 0x93	; 147
    1726:	84 e0       	ldi	r24, 0x04	; 4
    1728:	91 50       	subi	r25, 0x01	; 1
    172a:	20 40       	sbci	r18, 0x00	; 0
    172c:	80 40       	sbci	r24, 0x00	; 0
    172e:	e1 f7       	brne	.-8      	; 0x1728 <_Z13print_startupv+0x14e>
    1730:	00 c0       	rjmp	.+0      	; 0x1732 <_Z13print_startupv+0x158>
    1732:	00 00       	nop
	_delay_ms(DELAY_LCD_PRINT);
	gabi_clear();
    1734:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_Z10gabi_clearv>
	print_reg((char*)"0:", RX_PW_P0);
    1738:	61 e1       	ldi	r22, 0x11	; 17
    173a:	87 e5       	ldi	r24, 0x57	; 87
    173c:	91 e0       	ldi	r25, 0x01	; 1
    173e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_Z9print_regPch>
	print_reg((char*)" 1:", RX_PW_P1);
    1742:	62 e1       	ldi	r22, 0x12	; 18
    1744:	8b e6       	ldi	r24, 0x6B	; 107
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_Z9print_regPch>
	print_reg((char*)" 2:", RX_PW_P2);
    174c:	63 e1       	ldi	r22, 0x13	; 19
    174e:	8f e6       	ldi	r24, 0x6F	; 111
    1750:	91 e0       	ldi	r25, 0x01	; 1
    1752:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_Z9print_regPch>
	gabi_goto(0,1);
    1756:	61 e0       	ldi	r22, 0x01	; 1
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_Z9gabi_gotohh>
	print_reg((char*)"3:", RX_PW_P3);
    175e:	64 e1       	ldi	r22, 0x14	; 20
    1760:	83 e7       	ldi	r24, 0x73	; 115
    1762:	91 e0       	ldi	r25, 0x01	; 1
    1764:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_Z9print_regPch>
	print_reg((char*)" 4:", RX_PW_P4);
    1768:	65 e1       	ldi	r22, 0x15	; 21
    176a:	86 e7       	ldi	r24, 0x76	; 118
    176c:	91 e0       	ldi	r25, 0x01	; 1
    176e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_Z9print_regPch>
	print_reg((char*)" 5:", RX_PW_P5);
    1772:	66 e1       	ldi	r22, 0x16	; 22
    1774:	8a e7       	ldi	r24, 0x7A	; 122
    1776:	91 e0       	ldi	r25, 0x01	; 1
    1778:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_Z9print_regPch>
    177c:	9f ed       	ldi	r25, 0xDF	; 223
    177e:	23 e9       	ldi	r18, 0x93	; 147
    1780:	84 e0       	ldi	r24, 0x04	; 4
    1782:	91 50       	subi	r25, 0x01	; 1
    1784:	20 40       	sbci	r18, 0x00	; 0
    1786:	80 40       	sbci	r24, 0x00	; 0
    1788:	e1 f7       	brne	.-8      	; 0x1782 <_Z13print_startupv+0x1a8>
    178a:	00 c0       	rjmp	.+0      	; 0x178c <_Z13print_startupv+0x1b2>
    178c:	00 00       	nop
	_delay_ms(DELAY_LCD_PRINT);
	gabi_clear();
    178e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_Z10gabi_clearv>
	print_reg((char*)"Config:",CONFIG);
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	8e e7       	ldi	r24, 0x7E	; 126
    1796:	91 e0       	ldi	r25, 0x01	; 1
    1798:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <_Z9print_regPch>
	gabi_goto(0,1);
    179c:	61 e0       	ldi	r22, 0x01	; 1
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <_Z9gabi_gotohh>
	print_status();
    17a4:	0e 94 86 0a 	call	0x150c	; 0x150c <_Z12print_statusv>
    17a8:	9f ed       	ldi	r25, 0xDF	; 223
    17aa:	23 e9       	ldi	r18, 0x93	; 147
    17ac:	84 e0       	ldi	r24, 0x04	; 4
    17ae:	91 50       	subi	r25, 0x01	; 1
    17b0:	20 40       	sbci	r18, 0x00	; 0
    17b2:	80 40       	sbci	r24, 0x00	; 0
    17b4:	e1 f7       	brne	.-8      	; 0x17ae <_Z13print_startupv+0x1d4>
    17b6:	00 c0       	rjmp	.+0      	; 0x17b8 <_Z13print_startupv+0x1de>
    17b8:	00 00       	nop
	_delay_ms(DELAY_LCD_PRINT);
	gabi_clear();	
    17ba:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_Z10gabi_clearv>
}
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	08 95       	ret

000017cc <_Z5setupv>:

void setup(void)
{
    17cc:	ef 92       	push	r14
    17ce:	ff 92       	push	r15
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
	lcd_init();
    17d4:	0e 94 7e 05 	call	0xafc	; 0xafc <_Z8lcd_initv>
	gabi_home();
    17d8:	0e 94 d0 05 	call	0xba0	; 0xba0 <_Z9gabi_homev>
	init_relays();
    17dc:	0e 94 30 06 	call	0xc60	; 0xc60 <_Z11init_relaysv>
	// Setup and configure rf radio
	radio.begin();
    17e0:	86 e9       	ldi	r24, 0x96	; 150
    17e2:	91 e0       	ldi	r25, 0x01	; 1
    17e4:	0e 94 c7 04 	call	0x98e	; 0x98e <_ZN4RF245beginEv>
	
	// increase the delay between retries & # of retries
	radio.setRetries(15,15);
    17e8:	4f e0       	ldi	r20, 0x0F	; 15
    17ea:	6f e0       	ldi	r22, 0x0F	; 15
    17ec:	86 e9       	ldi	r24, 0x96	; 150
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	0e 94 23 05 	call	0xa46	; 0xa46 <_ZN4RF2410setRetriesEhh>
	// reduce the payload size.  seems to improve reliability
	radio.setPayloadSize(4);
    17f4:	64 e0       	ldi	r22, 0x04	; 4
    17f6:	86 e9       	ldi	r24, 0x96	; 150
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <_ZN4RF2414setPayloadSizeEh>
	radio.setChannel(107);
    17fe:	6b e6       	ldi	r22, 0x6B	; 107
    1800:	86 e9       	ldi	r24, 0x96	; 150
    1802:	91 e0       	ldi	r25, 0x01	; 1
    1804:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_ZN4RF2410setChannelEh>
	radio.setPALevel(RF24_PA_MAX);
    1808:	63 e0       	ldi	r22, 0x03	; 3
    180a:	86 e9       	ldi	r24, 0x96	; 150
    180c:	91 e0       	ldi	r25, 0x01	; 1
    180e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e>

	// Open pipes to other nodes for communication
	radio.openWritingPipe(pipes[1]);
    1812:	02 ed       	ldi	r16, 0xD2	; 210
    1814:	10 ef       	ldi	r17, 0xF0	; 240
    1816:	20 ef       	ldi	r18, 0xF0	; 240
    1818:	30 ef       	ldi	r19, 0xF0	; 240
    181a:	40 ef       	ldi	r20, 0xF0	; 240
    181c:	50 e0       	ldi	r21, 0x00	; 0
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	86 e9       	ldi	r24, 0x96	; 150
    1824:	91 e0       	ldi	r25, 0x01	; 1
    1826:	0e 94 c7 03 	call	0x78e	; 0x78e <_ZN4RF2415openWritingPipeEy>
	radio.openReadingPipe(1,pipes[0]);
    182a:	0f 2e       	mov	r0, r31
    182c:	f1 ee       	ldi	r31, 0xE1	; 225
    182e:	ef 2e       	mov	r14, r31
    1830:	f0 2d       	mov	r31, r0
    1832:	0f 2e       	mov	r0, r31
    1834:	f0 ef       	ldi	r31, 0xF0	; 240
    1836:	ff 2e       	mov	r15, r31
    1838:	f0 2d       	mov	r31, r0
    183a:	00 ef       	ldi	r16, 0xF0	; 240
    183c:	20 ef       	ldi	r18, 0xF0	; 240
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e0       	ldi	r20, 0x00	; 0
    1842:	50 e0       	ldi	r21, 0x00	; 0
    1844:	61 e0       	ldi	r22, 0x01	; 1
    1846:	86 e9       	ldi	r24, 0x96	; 150
    1848:	91 e0       	ldi	r25, 0x01	; 1
    184a:	0e 94 03 04 	call	0x806	; 0x806 <_ZN4RF2415openReadingPipeEhy>

	// Start listening
	radio.startListening();
    184e:	86 e9       	ldi	r24, 0x96	; 150
    1850:	91 e0       	ldi	r25, 0x01	; 1
    1852:	0e 94 70 02 	call	0x4e0	; 0x4e0 <_ZN4RF2414startListeningEv>
	
	reset_seq();
    1856:	0e 94 1e 08 	call	0x103c	; 0x103c <_Z9reset_seqv>

	setup_timers();
    185a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <_Z12setup_timersv>
	init_ADC();
    185e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_Z8init_ADCv>
	BUTTON_DDR&=~(1<<BUTTON_PIN);
    1862:	3d 98       	cbi	0x07, 5	; 7
	BUTTON_PORT|=(1<<BUTTON_PIN);
    1864:	45 9a       	sbi	0x08, 5	; 8
	pressed_counter = 0;
    1866:	10 92 93 01 	sts	0x0193, r1
    186a:	10 92 92 01 	sts	0x0192, r1
	release_counter = 0;
    186e:	10 92 91 01 	sts	0x0191, r1
    1872:	10 92 90 01 	sts	0x0190, r1
	button_last=0;
    1876:	10 92 8f 01 	sts	0x018F, r1
    187a:	10 92 8e 01 	sts	0x018E, r1
	
	print_startup();
    187e:	0e 94 ed 0a 	call	0x15da	; 0x15da <_Z13print_startupv>
	start_timer1();
    1882:	0e 94 cb 06 	call	0xd96	; 0xd96 <_Z12start_timer1v>
//	toggle=0;
}
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	ff 90       	pop	r15
    188c:	ef 90       	pop	r14
    188e:	08 95       	ret

00001890 <main>:
 			reset_seq();
		}
	}
}

int main() { setup(); while(1) loop(); return 0; }
    1890:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <_Z5setupv>
    1894:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <_Z4loopv>
    1898:	fd cf       	rjmp	.-6      	; 0x1894 <main+0x4>

0000189a <_GLOBAL__sub_I__Z8lcd_initv>:
#define DEBOUNCE_TIME 300

// Hardware configuration

// Set up nRF24L01 radio on SPI bus plus pins 9 & 10
RF24 radio(0,0);
    189a:	40 e0       	ldi	r20, 0x00	; 0
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	86 e9       	ldi	r24, 0x96	; 150
    18a0:	91 e0       	ldi	r25, 0x01	; 1
    18a2:	0e 94 4f 02 	call	0x49e	; 0x49e <_ZN4RF24C1Ehh>
    18a6:	08 95       	ret

000018a8 <_ZN8SPIClass5beginEv>:

SPIClass SPI;

void SPIClass::begin() {
	
	SPI_DDR |= (1<<SCK) | (1<<MOSI) | (1<<SS);
    18a8:	84 b1       	in	r24, 0x04	; 4
    18aa:	8c 62       	ori	r24, 0x2C	; 44
    18ac:	84 b9       	out	0x04, r24	; 4
	SPI_DDR &=~ (1<<MISO);
    18ae:	24 98       	cbi	0x04, 4	; 4
	PORTB |= (1<<MISO) | (1<<SS);
    18b0:	85 b1       	in	r24, 0x05	; 5
    18b2:	84 61       	ori	r24, 0x14	; 20
    18b4:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~((1<<SCK) | (1<<MOSI));
    18b6:	85 b1       	in	r24, 0x05	; 5
    18b8:	87 7d       	andi	r24, 0xD7	; 215
    18ba:	85 b9       	out	0x05, r24	; 5
	
	SPCR |= (1<<MSTR) | (1<<SPE);	
    18bc:	8c b5       	in	r24, 0x2c	; 44
    18be:	80 65       	ori	r24, 0x50	; 80
    18c0:	8c bd       	out	0x2c, r24	; 44
    18c2:	08 95       	ret

000018c4 <_ZN8SPIClass11setBitOrderEh>:



void SPIClass::setBitOrder(uint8_t bitOrder)
{
	if(bitOrder == LSBFIRST) {
    18c4:	81 11       	cpse	r24, r1
    18c6:	04 c0       	rjmp	.+8      	; 0x18d0 <_ZN8SPIClass11setBitOrderEh+0xc>
		SPCR |= (1<<DORD);
    18c8:	8c b5       	in	r24, 0x2c	; 44
    18ca:	80 62       	ori	r24, 0x20	; 32
    18cc:	8c bd       	out	0x2c, r24	; 44
    18ce:	08 95       	ret
	} else {
		SPCR &= ~(1<<DORD);
    18d0:	8c b5       	in	r24, 0x2c	; 44
    18d2:	8f 7d       	andi	r24, 0xDF	; 223
    18d4:	8c bd       	out	0x2c, r24	; 44
    18d6:	08 95       	ret

000018d8 <_ZN8SPIClass11setDataModeEh>:
	}
}

void SPIClass::setDataMode(uint8_t mode)
{
	SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    18d8:	9c b5       	in	r25, 0x2c	; 44
    18da:	93 7f       	andi	r25, 0xF3	; 243
    18dc:	89 2b       	or	r24, r25
    18de:	8c bd       	out	0x2c, r24	; 44
    18e0:	08 95       	ret

000018e2 <_ZN8SPIClass15setClockDividerEh>:
}

void SPIClass::setClockDivider(uint8_t rate)
{
	SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
    18e2:	9c b5       	in	r25, 0x2c	; 44
    18e4:	28 2f       	mov	r18, r24
    18e6:	23 70       	andi	r18, 0x03	; 3
    18e8:	9c 7f       	andi	r25, 0xFC	; 252
    18ea:	92 2b       	or	r25, r18
    18ec:	9c bd       	out	0x2c, r25	; 44
	SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);	
    18ee:	2d b5       	in	r18, 0x2d	; 45
    18f0:	82 fb       	bst	r24, 2
    18f2:	99 27       	eor	r25, r25
    18f4:	90 f9       	bld	r25, 0
    18f6:	82 2f       	mov	r24, r18
    18f8:	8e 7f       	andi	r24, 0xFE	; 254
    18fa:	89 2b       	or	r24, r25
    18fc:	8d bd       	out	0x2d, r24	; 45
    18fe:	08 95       	ret

00001900 <__umulhisi3>:
    1900:	a2 9f       	mul	r26, r18
    1902:	b0 01       	movw	r22, r0
    1904:	b3 9f       	mul	r27, r19
    1906:	c0 01       	movw	r24, r0
    1908:	a3 9f       	mul	r26, r19
    190a:	01 d0       	rcall	.+2      	; 0x190e <__umulhisi3+0xe>
    190c:	b2 9f       	mul	r27, r18
    190e:	70 0d       	add	r23, r0
    1910:	81 1d       	adc	r24, r1
    1912:	11 24       	eor	r1, r1
    1914:	91 1d       	adc	r25, r1
    1916:	08 95       	ret

00001918 <__adddi3_s8>:
    1918:	00 24       	eor	r0, r0
    191a:	a7 fd       	sbrc	r26, 7
    191c:	00 94       	com	r0
    191e:	2a 0f       	add	r18, r26
    1920:	30 1d       	adc	r19, r0
    1922:	40 1d       	adc	r20, r0
    1924:	50 1d       	adc	r21, r0
    1926:	60 1d       	adc	r22, r0
    1928:	70 1d       	adc	r23, r0
    192a:	80 1d       	adc	r24, r0
    192c:	90 1d       	adc	r25, r0
    192e:	08 95       	ret

00001930 <__cmpdi2_s8>:
    1930:	00 24       	eor	r0, r0
    1932:	a7 fd       	sbrc	r26, 7
    1934:	00 94       	com	r0
    1936:	2a 17       	cp	r18, r26
    1938:	30 05       	cpc	r19, r0
    193a:	40 05       	cpc	r20, r0
    193c:	50 05       	cpc	r21, r0
    193e:	60 05       	cpc	r22, r0
    1940:	70 05       	cpc	r23, r0
    1942:	80 05       	cpc	r24, r0
    1944:	90 05       	cpc	r25, r0
    1946:	08 95       	ret

00001948 <__tablejump2__>:
    1948:	ee 0f       	add	r30, r30
    194a:	ff 1f       	adc	r31, r31

0000194c <__tablejump__>:
    194c:	05 90       	lpm	r0, Z+
    194e:	f4 91       	lpm	r31, Z
    1950:	e0 2d       	mov	r30, r0
    1952:	09 94       	ijmp

00001954 <itoa>:
    1954:	fb 01       	movw	r30, r22
    1956:	9f 01       	movw	r18, r30
    1958:	e8 94       	clt
    195a:	42 30       	cpi	r20, 0x02	; 2
    195c:	c4 f0       	brlt	.+48     	; 0x198e <itoa+0x3a>
    195e:	45 32       	cpi	r20, 0x25	; 37
    1960:	b4 f4       	brge	.+44     	; 0x198e <itoa+0x3a>
    1962:	4a 30       	cpi	r20, 0x0A	; 10
    1964:	29 f4       	brne	.+10     	; 0x1970 <itoa+0x1c>
    1966:	97 fb       	bst	r25, 7
    1968:	1e f4       	brtc	.+6      	; 0x1970 <itoa+0x1c>
    196a:	90 95       	com	r25
    196c:	81 95       	neg	r24
    196e:	9f 4f       	sbci	r25, 0xFF	; 255
    1970:	64 2f       	mov	r22, r20
    1972:	77 27       	eor	r23, r23
    1974:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
    1978:	80 5d       	subi	r24, 0xD0	; 208
    197a:	8a 33       	cpi	r24, 0x3A	; 58
    197c:	0c f0       	brlt	.+2      	; 0x1980 <itoa+0x2c>
    197e:	89 5d       	subi	r24, 0xD9	; 217
    1980:	81 93       	st	Z+, r24
    1982:	cb 01       	movw	r24, r22
    1984:	00 97       	sbiw	r24, 0x00	; 0
    1986:	a1 f7       	brne	.-24     	; 0x1970 <itoa+0x1c>
    1988:	16 f4       	brtc	.+4      	; 0x198e <itoa+0x3a>
    198a:	5d e2       	ldi	r21, 0x2D	; 45
    198c:	51 93       	st	Z+, r21
    198e:	10 82       	st	Z, r1
    1990:	c9 01       	movw	r24, r18
    1992:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <strrev>

00001996 <ultoa>:
    1996:	fa 01       	movw	r30, r20
    1998:	cf 93       	push	r28
    199a:	ff 93       	push	r31
    199c:	ef 93       	push	r30
    199e:	22 30       	cpi	r18, 0x02	; 2
    19a0:	cc f0       	brlt	.+50     	; 0x19d4 <ultoa+0x3e>
    19a2:	25 32       	cpi	r18, 0x25	; 37
    19a4:	bc f4       	brge	.+46     	; 0x19d4 <ultoa+0x3e>
    19a6:	c2 2f       	mov	r28, r18
    19a8:	2c 2f       	mov	r18, r28
    19aa:	33 27       	eor	r19, r19
    19ac:	44 27       	eor	r20, r20
    19ae:	55 27       	eor	r21, r21
    19b0:	ff 93       	push	r31
    19b2:	ef 93       	push	r30
    19b4:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <__udivmodsi4>
    19b8:	ef 91       	pop	r30
    19ba:	ff 91       	pop	r31
    19bc:	60 5d       	subi	r22, 0xD0	; 208
    19be:	6a 33       	cpi	r22, 0x3A	; 58
    19c0:	0c f0       	brlt	.+2      	; 0x19c4 <ultoa+0x2e>
    19c2:	69 5d       	subi	r22, 0xD9	; 217
    19c4:	61 93       	st	Z+, r22
    19c6:	b9 01       	movw	r22, r18
    19c8:	ca 01       	movw	r24, r20
    19ca:	60 50       	subi	r22, 0x00	; 0
    19cc:	70 40       	sbci	r23, 0x00	; 0
    19ce:	80 40       	sbci	r24, 0x00	; 0
    19d0:	90 40       	sbci	r25, 0x00	; 0
    19d2:	51 f7       	brne	.-44     	; 0x19a8 <ultoa+0x12>
    19d4:	10 82       	st	Z, r1
    19d6:	8f 91       	pop	r24
    19d8:	9f 91       	pop	r25
    19da:	cf 91       	pop	r28
    19dc:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <strrev>

000019e0 <utoa>:
    19e0:	fb 01       	movw	r30, r22
    19e2:	9f 01       	movw	r18, r30
    19e4:	42 30       	cpi	r20, 0x02	; 2
    19e6:	74 f0       	brlt	.+28     	; 0x1a04 <utoa+0x24>
    19e8:	45 32       	cpi	r20, 0x25	; 37
    19ea:	64 f4       	brge	.+24     	; 0x1a04 <utoa+0x24>
    19ec:	64 2f       	mov	r22, r20
    19ee:	77 27       	eor	r23, r23
    19f0:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <__udivmodhi4>
    19f4:	80 5d       	subi	r24, 0xD0	; 208
    19f6:	8a 33       	cpi	r24, 0x3A	; 58
    19f8:	0c f0       	brlt	.+2      	; 0x19fc <utoa+0x1c>
    19fa:	89 5d       	subi	r24, 0xD9	; 217
    19fc:	81 93       	st	Z+, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	a1 f7       	brne	.-24     	; 0x19ec <utoa+0xc>
    1a04:	10 82       	st	Z, r1
    1a06:	c9 01       	movw	r24, r18
    1a08:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <strrev>

00001a0c <strrev>:
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	fc 01       	movw	r30, r24
    1a10:	67 2f       	mov	r22, r23
    1a12:	71 91       	ld	r23, Z+
    1a14:	77 23       	and	r23, r23
    1a16:	e1 f7       	brne	.-8      	; 0x1a10 <strrev+0x4>
    1a18:	32 97       	sbiw	r30, 0x02	; 2
    1a1a:	04 c0       	rjmp	.+8      	; 0x1a24 <strrev+0x18>
    1a1c:	7c 91       	ld	r23, X
    1a1e:	6d 93       	st	X+, r22
    1a20:	70 83       	st	Z, r23
    1a22:	62 91       	ld	r22, -Z
    1a24:	ae 17       	cp	r26, r30
    1a26:	bf 07       	cpc	r27, r31
    1a28:	c8 f3       	brcs	.-14     	; 0x1a1c <strrev+0x10>
    1a2a:	08 95       	ret

00001a2c <__udivmodhi4>:
    1a2c:	aa 1b       	sub	r26, r26
    1a2e:	bb 1b       	sub	r27, r27
    1a30:	51 e1       	ldi	r21, 0x11	; 17
    1a32:	07 c0       	rjmp	.+14     	; 0x1a42 <__udivmodhi4_ep>

00001a34 <__udivmodhi4_loop>:
    1a34:	aa 1f       	adc	r26, r26
    1a36:	bb 1f       	adc	r27, r27
    1a38:	a6 17       	cp	r26, r22
    1a3a:	b7 07       	cpc	r27, r23
    1a3c:	10 f0       	brcs	.+4      	; 0x1a42 <__udivmodhi4_ep>
    1a3e:	a6 1b       	sub	r26, r22
    1a40:	b7 0b       	sbc	r27, r23

00001a42 <__udivmodhi4_ep>:
    1a42:	88 1f       	adc	r24, r24
    1a44:	99 1f       	adc	r25, r25
    1a46:	5a 95       	dec	r21
    1a48:	a9 f7       	brne	.-22     	; 0x1a34 <__udivmodhi4_loop>
    1a4a:	80 95       	com	r24
    1a4c:	90 95       	com	r25
    1a4e:	bc 01       	movw	r22, r24
    1a50:	cd 01       	movw	r24, r26
    1a52:	08 95       	ret

00001a54 <__udivmodsi4>:
    1a54:	a1 e2       	ldi	r26, 0x21	; 33
    1a56:	1a 2e       	mov	r1, r26
    1a58:	aa 1b       	sub	r26, r26
    1a5a:	bb 1b       	sub	r27, r27
    1a5c:	fd 01       	movw	r30, r26
    1a5e:	0d c0       	rjmp	.+26     	; 0x1a7a <__udivmodsi4_ep>

00001a60 <__udivmodsi4_loop>:
    1a60:	aa 1f       	adc	r26, r26
    1a62:	bb 1f       	adc	r27, r27
    1a64:	ee 1f       	adc	r30, r30
    1a66:	ff 1f       	adc	r31, r31
    1a68:	a2 17       	cp	r26, r18
    1a6a:	b3 07       	cpc	r27, r19
    1a6c:	e4 07       	cpc	r30, r20
    1a6e:	f5 07       	cpc	r31, r21
    1a70:	20 f0       	brcs	.+8      	; 0x1a7a <__udivmodsi4_ep>
    1a72:	a2 1b       	sub	r26, r18
    1a74:	b3 0b       	sbc	r27, r19
    1a76:	e4 0b       	sbc	r30, r20
    1a78:	f5 0b       	sbc	r31, r21

00001a7a <__udivmodsi4_ep>:
    1a7a:	66 1f       	adc	r22, r22
    1a7c:	77 1f       	adc	r23, r23
    1a7e:	88 1f       	adc	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	1a 94       	dec	r1
    1a84:	69 f7       	brne	.-38     	; 0x1a60 <__udivmodsi4_loop>
    1a86:	60 95       	com	r22
    1a88:	70 95       	com	r23
    1a8a:	80 95       	com	r24
    1a8c:	90 95       	com	r25
    1a8e:	9b 01       	movw	r18, r22
    1a90:	ac 01       	movw	r20, r24
    1a92:	bd 01       	movw	r22, r26
    1a94:	cf 01       	movw	r24, r30
    1a96:	08 95       	ret

00001a98 <_exit>:
    1a98:	f8 94       	cli

00001a9a <__stop_program>:
    1a9a:	ff cf       	rjmp	.-2      	; 0x1a9a <__stop_program>
